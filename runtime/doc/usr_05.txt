*usr_05.txt*	Nvim

		     VIM 사용 설명서 - Bram Moolenaar 저

			      설정을 지정하십시오


Vim은 원하는대로 작동하도록 조정할 수 있습니다. 
이 장에서는 다른 값으로 설정된 옵션을 사용하여 Vim을 시작하는 방법을 설명합니다. 
플러그인을 추가하여 Vim의 기능을 확장하십시오. 
또는 자신의 매크로를 정의하십시오.

|05.1|	vimrc 파일
|05.2|	예제 vimrc 파일 설명
|05.3|	간단한 mappings
|05.4|	패키지 추가
|05.5|	플러그인 추가
|05.6|	도움말 파일 추가
|05.7|	옵션 창
|05.8|	자주 사용되는 옵션

     다음 장 : |usr_06.txt|  구문 강조 사용
 이전 장 : |usr_04.txt|  작은 변화 만들기
목차 : |usr_toc.txt|

==============================================================================
*05.1*	vimrc 파일				*vimrc-intro*

자주 사용하는 명령을 입력하는 것에 지쳐있을 것입니다. 
모든 선호하는 옵션 설정과 mapping으로 Vim을 시작하려면 init.vim 파일에 Vim을 작성해야한다. 
Vim은 시작할 때이 파일에서 명령을 실행합니다.

init.vim 파일이 이미있는 경우 (예 : sysadmin에 하나의 설정이있는 경우
당신을 위해) 이렇게 편집 할 수 있습니다 :>

	:edit $MYVIMRC

아직 vimrc 파일이 없다면 | init.vim | vimrc 파일을 만들 수 있는 곳을 찾으십시오.

이 파일은 항상 사용되며 권장됩니다.

	~/.config/nvim/init.vim         (Unix and OSX) ~
	~/AppData/Local/nvim/init.vim   (Windows) ~

vimrc 파일에는 콜론 뒤에 입력하는 모든 명령이 포함될 수 있습니다. 
가장 간단한 옵션은 설정 옵션입니다. 
예를 들어 Vim이 항상 'ignorecase'옵션을 켜기 시작하도록 하려면 다음 줄을 vimrc 파일에 추가하십시오.>

	set ignorecase

이 새로운 라인을 적용하려면 Vim을 종료하고 다시 시작해야 합니다.
나중에 Vim을 종료하지 않고 이 작업을 수행하는 방법을 배우게 됩니다.

이 장에서는 가장 기본적인 항목에 대해서만 설명합니다.
Vim 스크립트 파일을 작성하는 방법에 대한 자세한 정보는 | usr_41.txt |를 참조하십시오.

==============================================================================
*05.2*	예제 vimrc 파일 설명  	*vimrc_example.vim*

첫 번째 장에서는 예제 vimrc 파일을 사용하는 방법을 설명했습니다. 
파일은 다음에서 찾을 수 있습니다.

	$VIMRUNTIME/vimrc_example.vim ~

이 절에서는 이 파일에서 사용되는 다양한 명령을 설명합니다. 
이렇게하면 자신만의 환경 설정 방법에 대한 힌트를 얻을 수 있습니다. 
모든 것이 다 설명되지는 않습니다. 
자세한 내용은 ": help" 명령을 참조하십시오. >

	set backspace=indent,eol,start

삽입 모드에서 <BS>가 커서 앞에있는 문자를 삭제할 수 있는 위치를 지정합니다. 
쉼표로 구분 된 세 항목은 Vim이 줄 시작 부분의 공백, 줄 바꿈 및 삽입 모드가 
시작되기 전의 문자를 삭제하도록 지시합니다.
>

	set autoindent

이렇게하면 Vim은 새로 생성 된 행에 이전 행의 들여 쓰기를 사용합니다. 
따라서 새 줄 앞에 같은 공백이 있습니다. 
예를 들어 삽입 모드에서 <Enter>를 누르고 "o"명령을 사용하여 새 행을 열 때.
>

	set backup

이것은 파일을 덮어 쓸 때 파일의 백업 사본을 보관하도록 Vim에 지시합니다. 
백업 파일은 "~"이 추가 된 원본 파일과 동일한 이름을 갖습니다.  
|07.4|을 참조하십시오.
>

	set history=50

히스토리에 50 개의 명령과 50 개의 검색 패턴을 유지하십시오. 
더 적은 수 이상의 회선을 기억하려면 다른 번호를 사용하십시오.
>

	set ruler

Vim 윈도우의 오른쪽 아래 모서리에 항상 현재 커서 위치를 표시하십시오.

>
	set showcmd

눈금자 왼쪽 Vim 창 오른쪽 하단에 불완전한 명령을 표시하십시오. 
예를 들어 "2f"를 입력하면 Vim은 찾을 문자를 입력 할 때까지 기다리고 있으며 "2f"가 표시됩니다. 
다음에 "w"를 누르면 "2fw"명령이 실행되고 표시된 "2f"가 제거됩니다.

	+-------------------------------------------------+
	|text in the Vim window				  |
	|~						  |
	|~						  |
	|-- VISUAL --			2f     43,8   17% |
	+-------------------------------------------------+
	 ^^^^^^^^^^^		      ^^^^^^^^ ^^^^^^^^^^
	  'showmode'		     'showcmd'	'ruler'

>
	set incsearch

입력하는 동안 검색 패턴과 일치하는 것을 표시합니다.
>
	map Q gq

이것은 키 mapping을 정의합니다. 
자세한 내용은 다음 섹션을 참조하십시오. 
이 "gq" 연산자로 형식을 지정하는 "Q" 명령을 정의합니다. 
이것은 Vim 5.0 이전에 어떻게 작동했는지를 보여준다.
그렇지 않으면 "Q"명령이 Ex 모드를 시작하지만 필요하지 않습니다.

>
	vnoremap _g y:exe "grep /" . escape(@", '\\/') . "/ *.c *.h"<CR>

이 매핑은 시각적으로 선택된 텍스트를 뽑아서 C 파일에서 찾습니다. 
이것은 복잡한 매핑입니다. 매핑을 사용하여 매우 복잡한 작업을 수행 할 수 있음을 알 수 있습니다. 
그래도 입력 한 것처럼 실행되는 일련의 명령입니다.

>
	if &t_Co > 2 || has("gui_running")
	  syntax on
	  set hlsearch
	endif

이 옵션은 구문 강조를 활성화하지만 색상을 사용할 수있는 경우에만 사용합니다. 
'hlsearch'옵션은 Vim에게 마지막으로 사용한 검색 패턴과 일치하는 것을 강조 표시합니다. 
"if"명령은 어떤 조건이 충족 될 때만 옵션을 설정하는 데 매우 유용합니다.
| usr_41.txt |에 대한 자세한 내용.

							*vimrc-filetype*  >
	filetype plugin indent on

이것은 세 가지 매우 똑똑한 메커니즘을 사용합니다 :
1. 파일 형식 탐지.
   파일 편집을 시작할 때마다 Vim은 어떤 종류의
   이 파일입니다. "main.c"를 편집하면 Vim에 ".c"확장자가 표시되고
   이것을 "c"파일 유형으로 인식하십시오. 로 시작하는 파일을 편집 할 때
   "#! / bin / sh", Vim은이를 "sh"파일 유형으로 인식합니다.
   파일 유형 감지는 구문 강조와 다른 두 가지 유형에 사용됩니다.
   아래 항목.
   | filetypes |를 참조하십시오.

2.파일 유형 플러그인 파일 사용
   여러 가지 파일 유형이 다양한 옵션으로 편집됩니다. 예를 들어,
   "c"파일을 편집 할 때 'cindent'옵션을 다음과 같이 설정하는 것이 매우 유용합니다.
   자동으로 들여 쓰기를합니다. 이러한 일반적으로 유용한 옵션 설정은 다음과 같습니다.
   filetype 플러그인에 Vim에 포함되어 있습니다. 직접 추가 할 수도 있습니다.
   | write-filetype-plugin |.

3. 들여 쓰기 파일 사용
   프로그램을 편집 할 때 선의 들여 쓰기를 계산할 수 있습니다
   자동으로 Vim은 여러 들여 쓰기 규칙을 가지고 있습니다.
   파일 형식. 참조 : | filetype-indent-on | 및 'indentexpr'.
>
	autocmd FileType text setlocal textwidth=78

이렇게하면 Vim이 줄 바꿈 문자가 78자를 넘지 않게됩니다. 
그러나 일반 텍스트로 탐지 된 파일에만 해당됩니다. 
여기에는 실제로 두 부분이 있습니다. 
"autocmd FileType text"는 자동 명령입니다. 
이 파일 형식을 "텍스트"로 설정되어있는 경우 다음 명령이라고 정의
자동 실행. "setlocal textwidth = 78"은 'textwidth'옵션을 78로 설정하지만 
하나의 파일에서만 로컬로 설정합니다.

							*restore-cursor*  >
	autocmd BufReadPost *
	    \ if line("'\"") > 1 && line("'\"") <= line("$") |
	    \   exe "normal! g`\"" |
	    \ endif

다른 자동 명령. 이번에는 파일을 읽은 후 사용됩니다. 
''마크가 정의되어 있는지를 확인한 후 복잡한 것들은 점프한다. 
라인의 시작 부분에있는 백 슬래쉬는 이전 라인에서 명령을 계속하기 위해 사용된다. 
이 명령은 Vim 스크립트 파일에서만 작동하며 명령 줄에서 명령을 입력하는 경우에는 작동하지 않습니다.

==============================================================================
*05.3*	간단한 매핑

매핑을 사용하면 일련의 Vim 명령을 단일 키에 바인딩 할 수 있습니다. 
예를 들어, 특정 단어를 중괄호로 묶어야한다고 가정하십시오. 
즉, '금액'과 같은 단어를 '{금액}'으로 변경해야합니다. 
: map 명령을 사용하면 Vim에게 F5 키가이 작업을 수행한다고 알릴 수있다.
명령은 다음과 같습니다.>

	:map <F5> i{<Esc>ea}<Esc>
<
	참조 :
	이 명령을 입력 할 때 <F5>를 입력해야합니다.
문자. 마찬가지로 <Esc> 키를 눌러도 <Esc>
5 개의 문자를 입력하면됩니다. 이 차이에주의하십시오.
설명서를 읽을 때!

Let's break this down:
    <F5>	The F5 function key.  This is the trigger key that causes the
		command to be executed as the key is pressed.

    i{<Esc>	Insert the { character.  The <Esc> key ends Insert mode.

    e		Move to the end of the word.

    a}<Esc>	Append the } to the word.

": map"명령을 실행 한 후에 {}를 단어 주위에두기 만하면 커서를 첫 번째 문자에 놓고 F5를 누릅니다.

이 예에서 트리거는 단일 키입니다. 그것은 어떤 문자열이 될 수 있습니다. 하지만 때
기존 Vim 명령을 사용하면 해당 명령을 더 이상 사용할 수 없습니다. 당신은 그것을 피하는 것이 좋습니다.
   매핑과 함께 사용할 수있는 하나의 키는 백 슬래시입니다. 너가 ~ 한 뒤로
아마도 하나 이상의 매핑을 정의하고 다른 문자를 추가하려고합니다. 당신
단어 주위에 괄호를 추가하려면 "\ p"를 매핑하고 중괄호를 추가하려면 "\ c"를 매핑 할 수 있습니다 (예 :

	:map \p i(<Esc>ea)<Esc>
	:map \c i{<Esc>ea}<Esc>

\와 p를 다른 것 다음에 빠르게 입력해야하므로 Vim이 함께 속한다는 것을 알 수 있습니다.

": map"명령 (인수 없음)은 현재 매핑을 나열합니다. 에서
최소한 일반 모드 용입니다. | 40.1 | 절의 맵핑에 대한 자세한 정보.

==============================================================================
*05.4*	패키지 추가			*add-package* *vimball-install*

패키지는 Vim에 추가 할 수있는 파일 세트입니다. 두 가지 종류가 있습니다.
패키지 : 선택 사항이며 시작시 자동으로 로드됩니다.

Vim 배포판에는 옵션으로 사용할 수있는 몇 가지 패키지가있다.
예를 들어, vimball 플러그인. 이 플러그인은 생성 및 사용을 지원합니다.
vimballs (자체 설치 Vim 플러그인 아카이브).

vimball 플러그인을 사용하려면 vimrc 파일에 한 줄을 추가하십시오 :>
packadd vimball

That's all!  명령을 입력하여 시도해 볼 수도 있습니다. 이제 찾을 수 있습니다.
이 플러그인에 대한 도움말 :>
: 도움 vimball

이것은`: packadd`가 플러그인을 로드했을 때 추가되었습니다.
'런타임 경로'에 패키지 디렉토리가 있으므로 도움말 파일을 찾을 수 있습니다. 
그만큼 vimball의 도움을 위한 태그가 이미 생성되었습니다. 
패키지에 대한 도움말 태그를 생성해야하는 경우, `: helptags` 명령을 보십시오.

다양한 장소에서 인터넷을 통해 패키지를 찾을 수 있습니다. 대개
아카이브 또는 저장소로 저장됩니다. 아카이브의 경우 다음 단계를 수행 할 수 있습니다.
	1. 패키지 디렉토리를 만듭니다.>
mkdir -p ~ / .local / share / nvim / site / pack / fancy
< "공상"은 당신이 좋아하는 어떤 이름이라도 될 수 있습니다. 그 (것)들을 기술하는 것을 사용하십시오
꾸러미.
2. 해당 디렉토리에서 아카이브의 압축을 풉니 다. 이것은 상단을 추측한다.
아카이브의 디렉토리는 "시작"입니다.>
cd ~ / .local / share / nvim / site / pack / fancy
압축 풀기 /tmp/fancy.zip
<아카이브 레이아웃이 다른 경우에는
이 같은 경로 :
~ / .local / share / nvim / site / pack / fancy / start / fancytext / plugin / fancy.vim ~
여기서 "fancytext"는 패키지의 이름이고, 아무것도 될 수 있습니다.

패키지에 대한 자세한 정보는 여기에서 찾을 수 있습니다 : | packages |.

==============================================================================
*05.5*	플러그인 추가하기				*add-plugin* *plugin*

플러그인을 추가하면 Vim의 기능을 확장 할 수 있습니다. 플러그인은 아무 것도 아니다.
Vim이 시작될 때 자동으로로드되는 Vim 스크립트 파일 이상. 
플러그인 디렉토리에 플러그인을 추가하면 플러그인을 매우 쉽게 추가 할 수 있습니다.
{Vim이 | + eval |없이 컴파일되었을 때 사용할 수 없다. 특색}

플러그인에는 두 가지 유형이 있습니다.

    global plugin : 모든 종류의 파일에 사용됩니다.
  filetype plugin : 특정 유형의 파일에만 사용됩니다.

먼저 글로벌 플러그인에 대해 논의한 다음 파일 유형에 대해 논의합니다.
| add-filetype-plugin |.


GLOBAL PLUGINS * 표준 플러그인 *

Vim을 시작하면 여러 개의 글로벌 플러그인이 자동으로로드됩니다.
이를 위해 아무 것도 할 필요가 없습니다. 그들은 대부분의 기능을 추가합니다.
사람들은 사용하기를 원할 것이지만, 대신 Vim 스크립트로 구현되었습니다.
Vim으로 컴파일됩니다. 도움말 색인에 나열되어 있습니다.
| 표준 플러그인 목록 |. | load-plugins |도 참조하십시오.

						
* add-global-plugin *
전역 플러그인을 추가하여 항상 존재할 수있는 기능을 추가 할 수 있습니다
Vim을 사용할 때. 글로벌 플러그인을 추가하는 데는 두 단계 만 있습니다.
1. 플러그인의 사본을 얻으십시오.
2. 올바른 디렉토리에 놓으십시오.


세계적인 플러그를 얻는 법

플러그인을 어디에서 찾을 수 있습니까?
- 일부는 Vim과 함께 제공됩니다. $ VIMRUNTIME / macros 디렉토리에서 찾을 수 있습니다.
  및 하위 디렉토리.
- 그물에서 다운로드하십시오. http://www.vim.org에는 대규모 컬렉션이 있습니다.
- 때로는 Vim | maillist에 게시됩니다.
- 직접 작성해도되고, write-plugin을 참조하십시오.

일부 플러그인은 vimball 아카이브로 제공됩니다 (Vimball | 참조).


글로벌 플러 거 사용

먼저 특수 조건을 확인하기 위해 플러그인 자체의 텍스트를 읽으십시오.
그런 다음 파일을 플러그인 디렉토리에 복사하십시오.

시스템 플러그인 디렉토리 ~
유닉스 ~ / .local / share / nvim / site / plugin

유닉스 예제 (아직 플러그인 디렉토리가 없다고 가정) :>

mkdir -p ~ / .local / share / nvim / site / plugin
cp /tmp/yourplugin.vim ~ / .local / share / nvim / site / plugin

그게 다야! 이제이 플러그인에 정의 된 명령을 사용할 수 있습니다.

직접 플러그인을 플러그인 / 디렉토리에 두는 대신
플러그인 아래에 하위 디렉토리에 넣어서 더 잘 구성하십시오.
예를 들어 "~ / .local / share / nvim / site / plugin / perl / * .vim"을 사용하여
모든 Perl 플러그인.


FILETYPE PLUGINS			*add-filetype-plugin* *ftplugins*

빔 (Vim) 배포판에는 다양한 파일 유형에 대한 플러그인 세트가 함께 제공됩니다.
다음 명령을 사용하여 시작할 수 있습니다.>

: filetype plugin on

그게 다야! | vimrc-filetype |을 참조하십시오.

사용중인 파일 유형에 대한 플러그인이 누락되었거나
더 나은 것을 추가 할 수 있습니다. 파일 유형 플러그인을 추가하는 두 단계가 있습니다.
1. 플러그인의 사본을 얻으십시오.
2. 올바른 디렉토리에 놓으십시오.


FILETYPE 플러그 꽂기 얻기

글로벌 플러그인과 동일한 위치에서 찾을 수 있습니다. 조심해.
파일 유형이 언급 된 경우, 플러그인이 글로벌인지 또는
파일 유형 1. $ VIMRUNTIME / 매크로의 스크립트는 전역 변수이며, 파일 유형
플러그인은 $ VIMRUNTIME / ftplugin에 있습니다.


FILETYPE 플러그 인 사용 * ftplugin-name *

파일 유형 플러그인을 올바른 디렉토리에 놓아 추가 할 수 있습니다. 그만큼
이 디렉토리의 이름은 위에서 언급 한 것과 같은 디렉토리에 있습니다.
플러그인이지만, 마지막 부분은 "ftplugin"입니다. 당신이 플러그인을 찾았다 고 가정 해 봅시다.
"stuff"파일 형식이고 Unix에 있습니다. 그런 다음이 파일을
ftplugin 디렉토리 :>

	mkdir -p ~/.local/share/nvim/site/ftplugin
	mv thefile ~/.local/share/nvim/site/ftplugin/stuff.vim

해당 파일이 이미 존재하면 "stuff"에 대한 플러그인이 이미 있습니다. 
기존 플러그인이 추가중인 플러그인과 충돌하지 않는지 확인할 수 있습니다. 
괜찮으면 새 이름을 다른 이름으로 지정할 수 있습니다.>

	mv thefile ~/.local/share/nvim/site/ftplugin/stuff_too.vim

밑줄은 파일 유형의 이름을 나머지와 구분하는 데 사용됩니다. 
"otherstuff.vim"을 사용하면 작동하지 않고 "otherstuff"파일 유형으로로드됩니다.

파일 유형 플러그인의 일반적인 이름은 다음과 같습니다.>

	ftplugin/<filetype>.vim
	ftplugin/<filetype>_<name>.vim
	ftplugin/<filetype>/<name>.vim

여기서 "<name>"은 원하는 모든 이름이 될 수 있습니다.
Unix에서 "stuff"파일 형식의 예 :>

	~/.local/share/nvim/site/ftplugin/stuff.vim
	~/.local/share/nvim/site/ftplugin/stuff_def.vim
	~/.local/share/nvim/site/ftplugin/stuff/header.vim

<filetype> 부분은 플러그인이 사용되는 파일 유형의 이름입니다.
이 파일 유형의 파일 만 플러그인의 설정을 사용합니다. <이름>
플러그인 파일의 일부가 중요하지 않은 경우 플러그인을 여러 개 사용할 수 있습니다.
같은 파일 형식입니다. ".vim"으로 끝나야합니다.

추가 읽기 
|filetype-plugins|	파일 유형 플러그인에 관한 문서 및 해당 매핑이 
문제를 일으키는 것을 피하는 방법에 대한 정보.
|load-plugins|		시작할 때 전역 플러그인이 로드되는 경우.
|ftplugin-overrule| 전역 플러그인의 설정을 무시합니다.
|write-plugin|		플러그인 스크립트를 작성하는 방법.
|plugin-details|	플러그인 사용에 대한 추가 정보 또는 플러그인이 작동하지 않는 경우
|new-filetype|		새 파일 형식을 검색하는 방법

==============================================================================
*05.6*	도움말 파일 추가하기		                   *add-local-help*

운이 좋다면, 설치 한 플러그인도 도움말 파일과 함께 제공됩니다. 
도움말 파일을 설치하는 방법을 설명하여 새 플러그인에 대한 도움말을 쉽게 찾을 수 있습니다.

도움말 파일과 함께 제공되는 플러그인 ( "my-plugin")을 가정 해 보겠습니다.
비표준 장소 (보통`doc /`라는 하위 폴더에있다).

먼저 'runtimepath'에있는 디렉토리 중 하나에 "doc"디렉토리를 만듭니다.>

	:!mkdir -p ~/.local/share/nvim/site/doc

이제 도움말 파일을 "doc"디렉토리에 복사하십시오.>

	:!cp my-plugin/my-plugin-doc.txt ~/.local/share/nvim/site/doc

여기에 새로운 도움말에서 주제로 이동할 수있는 트릭이 있습니다.
파일. | : helptags |를 사용하여 로컬 태그 파일을 생성하십시오. 명령 :>

	:helptags ~/.local/share/nvim/site/doc

다음을 수행 할 때 로컬 도움말 파일에 대한 항목을 볼 수 있습니다.>

	:help local-additions

로컬 도움말 파일의 제목 줄이 자동으로 여기에 추가됩니다.
섹션. 여기서 어떤 로컬 도움말 파일이 추가되었는지 확인하고 태그를 통해 해당 파일로 건너 뛸 수 있습니다.

로컬 도움말 파일을 작성하려면 | write-local-help |를 참조하십시오.

==============================================================================
*05.7*	옵션 창

당신이 원하는 것을하는 옵션을 찾고 있다면, 다음을 검색 할 수 있습니다.
도움말 파일은 다음과 같습니다 : | options |. 또 다른 방법은이 명령을 사용하는 것입니다.>

	:options

한 줄로 설명 된 옵션 목록과 함께 새 창을 엽니 다.
옵션은 주제별로 그룹화되어 있습니다. 커서를 피사체로 이동하고 누릅니다.
<Enter> 키를 눌러 점프하십시오. 다시 <Enter> 키를 눌러 뒤로 이동하십시오. 또는 CTRL-O를 사용하십시오.

옵션 값을 변경할 수 있습니다. 예를 들어, "표시 중
텍스트 "제목을 선택한 다음 커서를이 행으로 이동하십시오.

	set wrap	nowrap ~

<Enter>를 누르면 줄이 다음과 같이 변경됩니다.

	set nowrap	wrap ~

옵션이 꺼졌습니다.

이 줄 바로 위에 '포장'옵션에 대한 간단한 설명이 있습니다. 
커서를 한 줄 위로 움직여이 줄에 놓으십시오. 
이제 <Enter>를 치면 '포장'옵션에 대한 전체 도움말로 이동합니다.

숫자 또는 문자열 인수를 사용하는 옵션의 경우 값을 편집 할 수 있습니다.
그런 다음 <Enter>를 눌러 새 값을 적용하십시오. 
예를 들어 커서를 몇 줄 아래로이 줄까지 이동하십시오.

	set so=0 ~

"$"로 커서를 0에 놓습니다. "r5"로 5로 변경하십시오. 
그런 다음 <Enter>를 눌러 새 값을 적용하십시오. 
커서를 움직이면 경계선에 도달하기 전에 텍스트가 스크롤되기 시작합니다. 
이것은 'scrolloff'옵션의 역할을하며, 스크롤이 시작되는 창 테두리로부터의 오프셋을 지정합니다.

==============================================================================
*05.8*	자주 사용되는 옵션

엄청난 옵션이 있습니다. 그들 대부분은 거의 사용하지 않을 것입니다. 
여기에 더 유용한 것들이 언급 될 것입니다. 
옵션 이름 앞뒤에 작은 따옴표를 사용하여 ": help"명령을 사용하여 이러한 옵션에 대한 
추가 도움말을 찾을 수 있음을 잊지 마십시오. 예 :>

	:help 'wrap'

옵션 값을 엉망으로 만들었다면, 다시 설정할 수 있습니다.
옵션 이름 다음에 앰퍼샌드 (&)를 넣음으로써 기본값. 예 :>

	:set iskeyword&


NOT WRAPPING LINES

Vim은 일반적으로 긴 줄을 감싸므로 모든 텍스트를 볼 수 있습니다. 때때로
텍스트를 창 오른쪽으로 계속 두는 것이 좋습니다. 
텍스트를 왼쪽 - 오른쪽으로 스크롤하면 긴 선을 모두 볼 수 있습니다. 
이 명령으로 포장을 푸십시오 :>

	:set nowrap

Vim은 텍스트가 아닌 텍스트로 이동할 때 자동으로 텍스트를 스크롤합니다.
표시됩니다. 10 자의 컨텍스트를 보려면 다음을 수행하십시오.>

	:set sidescroll=10

파일의 텍스트는 표시되는 방식으로 만 변경됩니다.


랩핑 동작 명령

이동을위한 대부분의 명령은 행의 시작과 끝에서 이동을 멈춥니다. 
'whichwrap'옵션을 사용하여 변경할 수 있습니다. 그러면 기본값으로 설정됩니다.>

	:set whichwrap=b,s

이렇게하면 <BS> 키를 줄의 첫 번째 위치에서 사용할 때 이동시킬 수 있습니다.
커서를 이전 행의 끝으로 이동하십시오. 그리고 <Space> 키는 줄의 끝에서 다음 줄의 시작으로 이동합니다.

<Left> 및 <Right> 커서 키를 줄 바꿈하려면 다음 명령을 사용하십시오.>

	:set whichwrap=b,s,<,>

이것은 여전히 ​​정상 모드에서만 가능합니다. 
<왼쪽>과 <오른쪽>이 삽입 모드에서도 이렇게하도록하려면 :>

	:set whichwrap=b,s,<,>,[,]

추가 할 수있는 몇 가지 다른 플래그가 있습니다 ( 'whichwrap'참조).


VIEWING TABS

파일에 탭이있는 경우 탭이있는 위치를 볼 수 없습니다. 그들을 보이게하려면 :>

	:set list

이제 모든 탭은 ^ I로 표시됩니다. 그리고 $가 각 끝에 표시됩니다.
그렇지 않으면 눈에 띄지 않게 될 후행 공백을 찾을 수 있습니다.
   단점은 하나의 파일에 여러 개의 탭이있을 때보기 흉한 것입니다.
컬러 터미널이 있거나 GUI를 사용 중이라면 Vim은 공백을 표시 할 수 있습니다
탭을 강조 표시된 문자로 나타냅니다. 'listchars'옵션 사용 :>

	:set listchars=tab:>-,trail:-


이제 모든 탭은 "> ---"(더 많거나 적은 "-") 및 후행으로 표시됩니다.
공백은 "-"로 표시됩니다.

키워드

'iskeyword'옵션은 단어에 나타날 수있는 문자를 지정합니다.>

	:set iskeyword
<	  iskeyword=@,48-57,_,192-255 ~

"@"는 모든 영문자를 나타냅니다. "48-57"은 ASCII를 의미합니다.
문자 48 ~ 57, 숫자 0 ~ 9입니다. "192-255"는
인쇄 가능한 라틴 문자.
   때로는 키워드에 대시를 포함하여 명령
"w"는 "대문자"를 한 단어로 간주합니다. 당신은 이렇게 할 수 있습니다 :>

	:set iskeyword+=-
	:set iskeyword
<	  iskeyword=@,48-57,_,192-255,- ~

새로운 값을 보면 Vim이 쉼표를 추가 한 것을 볼 수 있습니다.
   문자를 제거하려면 "- ="을 사용하십시오. 예를 들어, 밑줄을 제거하려면 :>

	:set iskeyword-=_
	:set iskeyword
<	  iskeyword=@,48-57,192-255,- ~

이번에는 쉼표가 자동으로 삭제됩니다.


ROOM FOR MESSAGES

Vim이 시작될 때 메시지에 사용되는 맨 아래에 한 줄이 있습니다.
메시지가 길면 자르거나 자르며, 메시지의 일부만 볼 수 있습니다.
또는 텍스트가 스크롤되고 계속하려면 <Enter> 키를 눌러야합니다.
   'cmdheight'옵션을 사용 된 행 수로 설정할 수 있습니다
메시지. 예 :>

	:set cmdheight=3

이것은 텍스트를 편집 할 여지가 적다는 의미이므로 타협입니다.

==============================================================================

다음 장 : |usr_06.txt|  구문 강조 사용

저작권 : |manual-copyright|을 참조하십시오.  vim:tw=78:ts=8:ft=help:norl:
