*usr_06.txt*	Nvim

		     VIM 사용 설명서 - Bram Moolenaar 저

 구문 강조 사용


흑백 텍스트는 지루하다. 색상으로 당신의 파일이 생기게 됩니다. 
이것은보기 좋을 뿐만 아니라 작업 속도를 높입니다. 
여러 종류의 텍스트에 사용되는 색상을 변경하십시오. 
화면에 표시되는 색상으로 텍스트를 인쇄하십시오.

|06.1|	켜기
|06.2|	색상이 잘못 되었습니까?
|06.3|	다른 색상
|06.4|	색상 또는 색상 없음
|06.5|	색상으로 인쇄
|06.6|	추가 읽기

     다음 장 : |usr_07.txt|  둘 이상의 파일 편집
이전 장 : |usr_05.txt|  설정을 지정하십시오
목차 : |usr_toc.txt|

==============================================================================
*06.1*	켜기

그것은 모두 하나의 간단한 명령으로 시작됩니다.>

	:syntax enable

대부분의 상황에서 파일에서 색상을 얻으려면 작동해야합니다. 빔 의지
자동으로 파일 유형을 감지하고 올바른 구문 강조 표시를로드합니다.
갑자기 댓글은 파란색, 키워드 갈색 및 문자열 빨간색입니다. 이것은 그것을 만든다.
파일을 쉽게보실 수 있습니다. 잠시 후 흑백 텍스트를 찾을 수 있습니다.
당신을 감속시킵니다!

구문 강조를 항상 사용하려면 ": syntax enable"
init.vim의 명령 | 파일.


터미널이 색상을 지원할 때만 구문 강조를 원한다면
이것을 |init.vim|파일에 넣을 수 있습니다  :>

	if &t_Co > 1
	   syntax enable
	endif

GUI 버전에서만 구문 강조를 원하면 ginit.vim | grep에서
": syntax enable"명령을 사용하십시오. 파일.

==============================================================================
*06.2*	색상이 잘못 되었습니까?

색상이 보이지 않는 데에는 여러 가지 이유가 있을 수 있습니다.

- 단말기가 색상을 지원하지 않습니다. 
Vim은 굵게, 기울임 꼴과 밑줄 친 텍스트를 사용합니다. 
그러나 이것은보기에 좋지 않습니다. 
아마 색상이있는 터미널을 얻으려고 할 것입니다. 
유닉스의 경우, XFree86 프로젝트에서 xterm을 권장합니다 : | xfree-xterm |.

- 터미널은 색상을 지원하지만 Vim은 색상을 지원하지 않습니다. 
$ TERM 설정이 올바른지 확인하십시오. 
예를 들어, 색상을 지원하는 xterm을 사용할 때 :>

		setenv TERM xterm-color
<
	or (depending on your shell): >

		TERM=xterm-color; export TERM

<	터미널 이름은 사용중인 터미널과 일치해야 합니다. 
여전히 작동하지 않는다면, |xterm-color|를 살펴보십시오.
|xterm-color|는 xterm뿐만 아니라 Vim 표시 색상을 만드는 몇 가지 방법을 보여줍니다.

- 파일 형식이 인식되지 않습니다.
Vim은 모든 파일 유형을 알지 못하며 가끔은 불가능합니다.
어떤 언어가 파일을 사용하는지 알기 위해서. 이 명령을 사용해보십시오 :>

		:set filetype
<
	결과가 "filetype ="이면 문제는 실제로 Vim입니다.
이것이 어떤 파일 유형인지는 알지 못합니다. 유형을 설정할 수 있습니다.
수동으로 :>

		:set filetype=fortran

<	어떤 유형이 사용 가능한지 보려면 디렉토리를보십시오.
$ VIMRUNTIME / 구문. GUI의 경우 구문 메뉴를 사용할 수 있습니다.
파일 형식 설정은 | modeline |을 사용하여 수행 할 수도 있습니다.
파일을 편집 할 때마다 강조 표시됩니다. 예를 들어,이
Makefile에서 라인을 사용할 수있다.
파일) :>

		# vim: syntax=make

<직접 파일 형식을 감지하는 방법을 알고있을 수 있습니다. 종종 파일
이름 확장자 (점 뒤에)를 사용할 수 있습니다.
새로운 파일 유형보기 | Vim에게 그 파일 타입을 탐지하도록 지시하는 방법.

- 파일 유형에 대한 강조 표시가 없습니다.
유사한 파일 유형을 수동으로 설정하여 시도해 볼 수 있습니다.
위에 언급했듯이. 그것이 충분하지 않다면, 당신은 당신 자신의 것을 쓸 수있다.
구문 파일 | mysyntaxfile |을 참조하십시오.


또는 색상이 잘못되었을 수 있습니다.

- 색이 지정된 텍스트는 읽기가 매우 어렵습니다.
Vim은 사용중인 배경색을 추측합니다. 
검은 색 (또는 다른 어두운 색)이면 텍스트에 밝은 색을 사용합니다. 
흰색 (또는 다른 밝은 색상)이면 텍스트에 어두운 색상이 사용됩니다. 
Vim이 잘못 추측하면 텍스트를 읽기가 어려울 것입니다. 
이 문제를 해결하려면 '배경'옵션을 설정하십시오. 어두운 배경 :>

		:set background=dark

<그리고 밝은 배경을 위해 :>

		:set background=light

<: syntax enable "명령 이전에 이것을 넣어야 합니다. 
그렇지 않으면 색상이 이미 설정되어있을 것입니다. 
Vim이 기본 색상을 다시 설정하게하려면 'background'를 설정 한 후에 ": syntax reset"을 할 수 있습니다.

- 아래에서 위로 스크롤 할 때 색상이 잘못되었습니다. 
빔은 텍스트를 파싱하기 위해 전체 파일을 읽지 않습니다. 
파일을보고있는 곳이면 어디서나 파싱을 시작합니다. 
시간을 많이 절약 할 수 있지만 때때로 색상이 잘못되었습니다. 
간단한 수정으로 CTRL-L을 치고있다. 또는 조금 뒤로 스크롤 한 다음 다시 앞으로 이동하십시오. 
실제 수정 사항은 | : syn-sync |를 참조하십시오. 
일부 구문 파일에는 구문을 더 자세히 되돌릴 수있는 방법이 있습니다. 
특정 구문 파일에 대한 도움말을 참조하십시오. 예를 들어, | tex.vim | TeX 문법.

==============================================================================
*06.3*	다른 색상 				*:syn-default-override*

기본 색상이 마음에 들지 않으면 다른 색상 구성표를 선택할 수 있습니다. 
GUI에서는 Edit / Color Scheme 메뉴를 사용하십시오. 
다음 명령을 입력 할 수도 있습니다 :>

	:colorscheme evening

"저녁"은 색 구성표의 이름입니다. 
몇 가지 다른 도구를 사용해 볼 수 있습니다. 
$ VIMRUNTIME / colors 디렉토리를 보십시오.

원하는 색 구성표를 찾았 으면 ": colorscheme"명령을 init.vim | 파일

나만의 색 구성표를 쓸 수도 있습니다. 
이것은 당신이 그것을하는 방법입니다 

1. 가까운 색상 구성표를 선택하십시오. 
이 파일을 자신의 Vim 디렉토리에 복사하십시오. 
유닉스의 경우, 이것은 작동해야합니다 :>

	!mkdir -p ~/.config/nvim/colors
	!cp $VIMRUNTIME/colors/morning.vim ~/.config/nvim/colors/mine.vim
<
   This is done from Vim, because it knows the value of $VIMRUNTIME.

2.색 구성표 파일을 편집하십시오. 다음 항목이 유용합니다.

	term		흑백 터미널의 속성
	cterm		컬러 터미널의 속성
	ctermfg		컬러 터미널의 전경색
	ctermbg   컬러 터미널의 배경색
	gui		GUI의 속성
	guifg		GUI의 전경색
	guibg		GUI의 배경색

   예를 들어, 댓글을 녹색으로 만들려면 :>

	:highlight Comment ctermfg=green guifg=green
<
  "cterm"및 "gui"에 사용할 수있는 속성은 "굵게"및 "밑줄"입니다.
   둘 다 원하면 "굵은 체, 밑줄"을 사용하십시오. 자세한 내용은 | : highlight |
   명령.

3. Vim에게 항상 당신의 색체 배합을 사용하라고 말한다. 이 줄을 당신의 | vimrc | :>에 넣으십시오.

	colorscheme mine

자주 사용되는 색상 조합이 어떻게 보이는지 보려면 이 명령을 사용하십시오.>

	:runtime syntax/colortest.vim

다양한 색상 조합의 텍스트가 표시됩니다. 
어느 것이 읽기 쉽고 멋진 지 확인할 수 있습니다.

==============================================================================
*06.4*	색상 또는 색상 없음

텍스트를 컬러로 표시하는 것은 많은 노력을 필요로합니다. 표시를 찾으면
너무 느리면 잠시 구문 강조를 비활성화 할 수 있습니다.>

	:syntax clear

다른 파일 (또는 같은 파일)을 편집 할 때 색상이 다시 나타납니다.

							*:syn-off*
If you want to stop highlighting completely use: >

	:syntax off

이렇게하면 구문 강조를 완전히 비활성화하고 모든 버퍼에 대해 즉시 제거 할 수 있습니다.

							*:syn-manual*
특정 파일에만 구문 강조를 사용하려면 다음을 사용하십시오.>

	:syntax manual

이렇게하면 구문 강조 표시가 활성화되지만 버퍼 편집을 시작할 때 자동으로 전환되지 않습니다. 
현재 버퍼에 대한 강조 표시를 전환하려면 '구문' 옵션을 설정하십시오.>

	:set syntax=ON
<
==============================================================================
*06.5*	색상으로 인쇄 				*syntax-printing*

MS-Windows 버전에서는 다음 명령을 사용하여 현재 파일을 인쇄 할 수 있습니다.>

	:hardcopy

프린터와 대화 상자를 선택할 수있는 일반적인 프린터 대화 상자가 나타납니다.
몇 가지 설정. 컬러 프린터를 가지고 있다면, 용지 출력물은 Vim 내부의 것과 똑같아 보여야 합니다. 
그러나 어두운 배경을 사용하면 색이 흰 종이에 잘 보이도록 조정됩니다.

Vim의 인쇄 방식을 변경하는 몇 가지 옵션이 있습니다.
	'printdevice'
	'printheader'
	'printfont'
	'printoptions'

일련의 선만 인쇄하려면 비주얼 모드를 사용하여 선을 선택한 다음
명령을 입력하십시오.>

	v100j:hardcopy

"v"는 비주얼 모드를 시작합니다. "100j"가 100 줄 아래로 이동하면
강조 표시됩니다. 그러면 ": hardcopy"가 해당 행을 인쇄합니다. 너는 다른 것을 사용할 수있다.
물론 비주얼 모드로 이동할 수 있습니다.

PostScript 프린터가 있으면 Unix에서도 작동합니다. 그렇지 않으면, 당신은
좀 더 많은 작업을해야 할 것입니다. 텍스트를 HTML로 먼저 변환해야합니다.
웹 브라우저에서 인쇄하십시오.

다음 명령을 사용하여 현재 파일을 HTML로 변환하십시오.>

	:TOhtml


작동하지 않는 경우 :>

	:source $VIMRUNTIME/syntax/2html.vim

이 파일은 큰 파일에 대해서는 꽤 오래 걸릴 수 있습니다.
잠시 후 다른 창에 HTML 코드가 표시됩니다. 지금 어딘가에 써라.
(당신이 나중에 버리는 곳은 중요하지 않습니다.)
>
	:write main.c.html

이 파일을 즐겨 찾는 브라우저에서 열고 거기에서 인쇄하십시오. 모두가 가면
출력은 Vim에서와 똑같이 보입니다. | 2html.vim | ...에 대한
세부. HTML 파일을 다 마쳤 으면 HTML 파일을 삭제하는 것을 잊지 마십시오.

인쇄하는 대신 HTML 파일을 웹 서버에 넣고 다른 사람들이 채색 된 텍스트를 볼 수도 있습니다.

==============================================================================
*06.6*	추가 읽기

|usr_44.txt|  고유 한 구문이 강조 표시되었습니다.
|syntax|     모든 세부 사항.

==============================================================================

다음 장 : |usr_07.txt|  둘 이상의 파일 편집

저작권 : |manual-copyright|을 참조하십시오.  vim:tw=78:ts=8:ft=help:norl:
