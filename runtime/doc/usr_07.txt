*usr_07.txt*	Nvim

		    VIM 사용 설명서 - Bram Moolenaar 저

둘 이상의 파일 편집


얼마나 많은 파일이 있더라도 Vim을 떠나지 않고 파일을 편집 할 수 있습니다. 
작업 할 파일 목록을 정의하고 하나에서 다른 파일로 건너 뜁니다. 
한 파일에서 텍스트를 복사하여 다른 파일에 저장하십시오.

|07.1|	다른 파일 편집
|07.2|	파일 목록
|07.3|	파일에서 파일로 건너 뛰기
|07.4|	백업 파일
|07.5|	파일간에 텍스트 복사
|07.6|	파일보기
|07.7|	파일 이름 변경하기

     다음장 : |usr_08.txt|  창 분할하기
이전장 : |usr_06.txt|  구문 강조 사용
목차 : |usr_toc.txt|

==============================================================================
*07.1*	다른 파일 편집

지금까지 편집을 원하는 모든 파일에 대해 Vim을 시작해야했습니다. 
더 간단한 방법이 있습니다. 
다른 파일 편집을 시작하려면 다음 명령을 사용하십시오.>

	:edit foo.txt

"foo.txt"대신 임의의 파일 이름을 사용할 수 있습니다. 
빔은 현재 파일을 닫고 새로운 파일을 엽니다. 
그러나 현재 파일에 변경 사항이 저장되지 않은 경우 Vim은 오류 메시지를 표시하고 새 파일을 열지 않습니다.

	E37: No write since last change (use ! to override) ~

	참조 :
	Vim은 각 오류 메시지의 시작 부분에 오류 ID를 넣습니다. 
  메시지를 이해하지 못했거나 그 원인을 이해하지 못한 경우 도움말 시스템에서이 ID를 찾습니다. 
  이 경우 :>

		:help E37

이 시점에서 여러 가지 대안이 있습니다. 파일을 쓸 수 있습니다.
이 명령을 사용하여 :>

	:write

또는 Vim이 변경 사항을 무시하고 새 파일을 편집하도록
힘 (!) 문자 :>

	:edit! foo.txt

다른 파일을 편집하고 현재 파일에 변경 사항을 쓰지 않으려는 경우
아직 파일을 숨길 수 있습니다.>

	:hide edit foo.txt

변경된 텍스트는 계속 표시되지만 볼 수는 없습니다. 
| 22.4 | : 버퍼 목록에서 더 자세히 설명합니다.

==============================================================================
*07.2*	파일 목록

Vim을 시작하여 일련의 파일을 편집 할 수 있습니다. 예 :>

	vim one.c two.c three.c

이 명령은 Vim을 시작하고 3 개의 파일을 편집 할 것이라고 알려줍니다. 
빔은 첫 번째 파일 만 표시합니다. 
이 파일에서 작업을 완료 한 후 다음 파일을 편집하려면이 명령을 사용하십시오.>

	:next

현재 파일에서 변경 사항을 저장하지 않은 경우 오류 메시지가 나타나고 ": next"가 작동하지 않습니다.
 이것은 이전 절에서 언급 한 ": edit"와 같은 문제입니다. 
 변경 사항을 포기하려면 :>

	:next!

하지만 대부분 변경 사항을 저장하고 다음 파일로 이동하려고 합니다. 
이것에 대한 특별한 명령이 있습니다 :>

	:wnext

두 개의 별도 명령을 사용하는 것과 같습니다.>

	:write
	:next


WHERE AM I?

편집중인 인수 목록에서 어떤 파일을 보려면 창을보십시오.
표제. "(2/3)"과 같이 표시되어야합니다. 즉, 편집 중임을 의미합니다.
3 개 파일 중 두 번째 파일
   파일 목록을 보려면 다음 명령을 사용하십시오.>

	:args

이것은 "인수"의 약자입니다. 결과는 다음과 같습니다.

	one.c [two.c] three.c ~

이것들은 Vim을 시작한 파일들이다. 
현재 편집중인 "two.c"는 대괄호 안에 있습니다.

다른 논평으로 이동

하나의 파일로 돌아가려면 :>

	:previous

이 명령은 ": next"명령과 같습니다. 단, 다른 명령으로 이동한다는 점만 다릅니다.
방향. 다시 말하지만, 파일을 먼저 쓰고 싶을 때 바로 가기 명령이 있습니다 :>

	:wprevious

목록의 마지막 파일로 이동하려면 :>

	:last

첫 번째 페이지로 다시 이동하려면 다음을 수행하십시오.>

	:first

": wlast"또는 ": wfirst"명령은 없습니다!

": next"및 ": previous"에 대해 개수를 사용할 수 있습니다. 
두 개의 파일을 건너 뛰려면 다음을 수행하십시오.>

	:2next


자동 작성

파일을 돌아 다니며 변경을 할 때는 ": write"를 사용해야한다는 것을 기억해야 합니다. 
그렇지 않으면 오류 메시지가 나타납니다. 
항상 수정 된 파일을 쓰고 싶다면 빔에 자동으로 쓰기를 지시 할 수 있습니다 :>

	:set autowrite

작성하고 싶지 않을 수도 있는 파일을 편집 할 때 다시 끄십시오.

	:set noautowrite

다른 파일 목록 편집

Vim을 종료하지 않고도 파일 목록을 재정의하고 시작할 수 있습니다.
다시. 다른 세 파일을 편집하려면이 명령을 사용하십시오.>

	:args five.c six.c seven.h

Or use a wildcard, like it's used in the shell: >

	:args *.txt

빔 (Vim)은 목록의 첫 번째 파일로 이동합니다. 
다시 말하지만 현재 파일에 변경 사항이 있는 경우 파일을 먼저 쓰거나 ": args!"를 사용할 수 있습니다. 
(!가 추가됨) 변경 사항을 버려야 합니다.

DID YOU EDIT THE LAST FILE?
							*arglist-quit*

파일 목록을 사용할 때 Vim은 파일 목록을 모두 편집한다고 가정합니다. 
너무 일찍 종료되는 것을 방지하기 위해 목록의 마지막 파일을 아직 편집하지 않았을 때이 오류가 발생합니다.

	E173: 46 more files to edit ~

정말로 나가고 싶다면 다시 해보십시오. 
그러면 작동 할 것입니다 (그러나 그 사이에 다른 명령을했습니다).

==============================================================================
*07.3*	파일에서 파일로 건너 뛰기

두 파일 사이를 빠르게 이동하려면 CTRL- ^ (영어 - 미국 키보드의 경우 ^가 6 키 위에 있음)를 누릅니다. 
예 :>

	:args one.c two.c three.c

You are now in one.c. >

	:next

이제 너는 둘이 다. CTRL- ^를 사용하여 one.c로 돌아갑니다. 
또 다른 CTRL - ^ 그리고 당신은 두개로 돌아왔습니다. 또 다른 CTRL- ^와 one.c에 다시 있습니다. 지금 할 일 :>

	:next

당신은 three.c에 있습니다. 
CTRL- ^ 명령은 파일 목록에있는 위치의 아이디어를 변경하지 않습니다. 
": next"및 ": previous"와 같은 명령 만 수행합니다.

이전에 편집 한 파일을 "대체" 파일이라고 합니다. 
Vim을 시작했을 때 CTRL- ^는 이전 파일이 없으므로 작동하지 않습니다.


미리 정의 된 표식


다른 파일로 건너 뛰고 나면 매우 유용한 두 개의 미리 정의 된 표시를 사용할 수 있습니다.>

	`"

그러면 파일을 떠날 때 커서가 있었던 위치로 이동합니다. 
기억해야 할 또 다른 마크는 마지막으로 변경 한 위치입니다.>

	`.

"one.txt"파일을 편집 중이라고 가정하십시오. 
파일의 중간 부분에서 "x"를 사용하여 문자를 삭제합니다. 
그런 다음 "G"를 사용하여 마지막 줄에 가서 ": w"로 파일을 작성하십시오. 
다른 여러 파일을 편집 한 다음 ": edit one.txt"를 사용하여 "one.txt"로 돌아갑니다. 
``Vim이 파일의 마지막 줄로 점프한다 .` '를 사용하면 문자를 지운 위치로 이동한다.
``와`. 다른 변경을 하거나 파일을 남길 때까지 기억 된 위치로 이동합니다.


파일 표시


4 장에서는 "mx"가있는 파일에 표시를하고 "x"로 그 위치로 점프하는 방법을 설명했습니다.
그것은 하나의 파일 내에서 작동합니다. 다른 파일을 편집하고 거기에 표시를하면 해당 파일에만 해당됩니다.
따라서 각 파일에는 고유 한 표시가 있으며 파일에 대해 로컬입니다.
 지금까지는 소문자로 표시를 사용했습니다. 
 또한 대문자로 된 표시가 있습니다. 
 이들은 전역 적이며 어떤 파일에서나 사용할 수 있습니다. 
 예를 들어 "foo.txt"파일을 편집하고 있다고 가정합니다. 파일의 중간 ( "50 %")으로 가서 F 표시를합니다 (foo의 경우 F) :>

	50%mF

이제 "bar.txt"파일을 편집하고 마지막 줄에 B 표시 (막대의 경우 B)를 배치하십시오.
>
	GmB

이제 "F"명령을 사용하여 foo.txt의 중간으로 돌아갈 수 있습니다. 
또 다른 파일을 편집하고 "B"를 입력하면 bar.txt의 끝으로 이동합니다.

파일 표시는 다른 곳에 배치 될 때까지 기억됩니다. 
따라서 마크를 배치하고 몇 시간 동안 편집 할 수 있으며 그 마크로 돌아갈 수 있습니다.
  마크 글자 간의 간단한 연결을 생각해 보는 것은 종종 유용합니다.
그리고 그것이 놓이는 곳. 예를 들어, 헤더 파일에서 H 기호를 사용하십시오.
C 코드 파일의 Makefile과 C.

특정 기호가 어디에 있는지 보려면 ": marks"명령에 인수를 지정하십시오.>

	:marks M

여러 개의 인수를 지정할 수도 있습니다.>

	:marks MCP

CTRL-O와 CTRL-I를 사용하여 거기에 표시하지 않고 이전 위치와 새로운 위치로 이동할 수 있다는 것을 잊지 마십시오.

==============================================================================
*07.4*	백업 파일

일반적으로 Vim은 백업 파일을 생성하지 않습니다. 
가지고 싶다면 다음 명령을 실행하면 됩니다.>

	:set backup

백업 파일의 이름은 끝에 ~가 붙은 원본 파일입니다.
파일의 이름이 data.txt 인 경우, 백업 파일 이름은 다음과 같습니다.
data.txt ~.
   백업 파일이 ~로 끝나는 것을 싫어하면
확장 프로그램을 변경하십시오 :>

	:set backupext=.bak

그러면 data.txt ~ 대신 data.txt.bak가 사용됩니다.
   여기에서 중요한 또 다른 옵션은 'backupdir'입니다. 그것은 어디에
백업 파일이 작성됩니다. 동일한 백업에 쓰기위한 기본값
디렉토리를 원본 파일로 사용하는 것이 대부분 올바른 일입니다.

	노트 :
'backup'옵션이 설정되지 않았지만 'writebackup'이 설정되면 Vim은
여전히 백업 파일을 만듭니다. 그러나 서면으로 삭제됩니다.
파일이 성공적으로 완료되었습니다. 이것은 안전 기능을한다.
쓰기가 어떤 식 으로든 실패 할 때 원래 파일을 잃지 않도록 (디스크
전체가 가장 일반적인 원인입니다. 번개에 맞았다면
또 다른, 비록 덜 일반적).

원래 파일 유지하기

소스 파일을 편집하는 경우 변경하기 전에 파일을 보관할 수 있습니다. 
그러나 백업 파일은 파일을 쓸 때마다 덮어 씁니다. 
따라서 첫 번째 버전이 아닌 이전 버전 만 포함합니다.
   Vim이 원본 파일을 유지하게하려면 'patchmode'옵션을 설정하십시오. 
   변경된 파일의 첫 번째 백업에 사용되는 확장자를 지정합니다. 
   일반적으로 이렇게 할 수 있습니다 :>

	:set patchmode=.orig

data.txt 파일을 처음 편집하고 파일을 변경하면 
Vim은 "data.txt.orig"라는 이름으로 변경되지 않은 파일의 복사본을 보관합니다.
파일을 더 변경하면 Vim은 "data.txt.orig"가 이미 존재 함을 알게되고 그대로 둡니다.
그런 다음 백업 파일을 "data.txt ~"(또는 'backupext'로 지정한 파일)이라고합니다.
'patchmode'를 비워두면 (기본값) 원본 파일이 보관되지 않습니다.

==============================================================================
*07.5*	 파일간에 텍스트 복사

이것은 한 파일에서 다른 파일로 텍스트를 복사하는 방법을 설명합니다. 
간단한 예제부터 시작하겠습니다. 
복사 할 텍스트가 들어있는 파일을 편집하십시오.
커서를 텍스트의 시작 부분으로 이동시키고 "v"를 누르십시오. 
이것은 비주얼 모드를 시작합니다.
이제 커서를 텍스트의 끝으로 옮기고 "y"를 누르십시오. 
이것은 선택한 텍스트를 잡아냅니다 (복사).
  위 단락을 복사하려면 다음을 수행하십시오.>

	:edit thisfile
	/This
	vjjjj$y

이제 텍스트를 넣으려는 파일을 편집하십시오. 
텍스트를 표시 할 문자로 커서를 이동하십시오. 
텍스트를 넣으려면 "p"를 사용하십시오. >

	:edit otherfile
	/There
	p

물론 다른 많은 명령을 사용하여 텍스트를 잡아낼 수 있습니다. 예를 들어,
전체 라인 선택 "V"로 시각 모드를 시작하십시오. 또는 CTRL-V를 사용하여
직사각형 블록. 또는 "Y"를 사용하여 한 줄을 꺼내고, "yaw"를 사용하여 홱 잡아 당깁니다.
기타
   "p"명령은 텍스트 뒤에 커서를 놓습니다. 텍스트를 넣으려면 "P"를 사용하십시오.
커서 앞에. Vim은 전체 라인이나 블록을 잡아 당겨 다시 기억한다면 기억합니다.


등록기 사용

한 파일에서 다른 파일로 여러 텍스트를 복사 할 때,
파일을 전환하고 대상 파일을 작성하는 데 많은 시간이 걸립니다.
이것을 피하려면 각 텍스트를 자체 레지스터에 복사하십시오.
   레지스터는 Vim이 텍스트를 저장하는 곳입니다. 여기서 우리는
a ~ z라는 이름의 레지스터 (나중에 다른 것들이 있음을 알게 될 것입니다). 복사 해보자.
f 레지스터에 문장 넣기 (첫 번째 f) :>

	"fyas

"yas"명령은 이전과 같은 문장을 짖습니다. 
Vim이 텍스트를 f 레지스터에 넣어야한다고 알려주는 f입니다.
 이것은 yank 명령 바로 앞에 와야합니다.
   이제 3 개의 전체 라인을 l 레지스터에 뺍니다 (라인은 l) :>

	"l3Y

카운트는 "전에도 가능할 수 있습니다."
b (블록 용) 레지스터 :>

	CTRL-Vjjww"by

레지스터 스펙 "b"는 "y"명령 바로 앞에 있지만, "w"명령 전에 넣었 으면 작동하지 않을 것입니다.
   이제 f, l 및 b 레지스터에 세 개의 텍스트가 있습니다. 
   다른 파일을 편집하고, 원하는 곳으로 이동하고 텍스트를 배치하십시오.>
   
	"fp

다시 레지스터 스펙 "f"는 "p"명령 앞에옵니다.
임의의 순서로 레지스터를 넣을 수 있습니다. 
그리고 그 텍스트는 당신이 그 안에 다른 것을 끌어 올 때까지 등록부에 남아 있습니다.
따라서 원하는만큼 여러 번 넣을 수 있습니다.

텍스트를 삭제할 때 레지스터를 지정할 수도 있습니다. 이동하려면이 항목을 사용하십시오.
텍스트 여러 조각. 예를 들어, 단어를 삭제하고 w 레지스터에 씁니다. >

	"wdaw

다시 레지스터 명세는 삭제 명령 "d"앞에 옵니다.


파일에 추가하기

텍스트 줄을 하나의 파일로 수집 할 때 다음 명령을 사용할 수 있습니다.>

	:write >> logfile

이것은 "logfile"의 끝에 현재 파일의 텍스트를 씁니다. 
따라서 추가됩니다. 이렇게하면 행을 복사하고 로그 파일을 편집하여 거기에 두어야 합니다. 
따라서 두 단계를 저장합니다. 그러나 파일 끝에만 추가 할 수 있습니다.
몇 줄을 추가하려면 ": write"를 입력하기 전에 비주얼 모드에서 선택하십시오. 
10 장에서 다양한 범위의 선을 선택하는 다른 방법을 배우게 됩니다.

==============================================================================
*07.6*	파일보기

때로는 파일을 다시 쓰려는 의도없이 파일에 들어있는 내용 만보고 싶을때가 있습니다. 
실수로 ": w"를 입력하고 원본 파일을 덮어 쓸 위험이 있습니다. 
이를 방지하려면 파일을 읽기 전용으로 편집하십시오.
Vim을 읽기 전용 모드로 시작하려면 다음 명령을 사용하십시오.>

	vim -R file

Unix에서이 명령은 동일한 작업을 수행해야 합니다.>
 
	view file

이제 "파일"을 읽기 전용 모드로 편집 중입니다. ": w"를 사용하려고하면
오류 메시지가 나타나고 파일이 쓰여지지 않습니다.
   파일을 변경하려고 할 때 빔은 경고를줍니다 :

	W10: Warning: Changing a readonly file ~

변경이 완료됩니다. 이렇게하면 파일을 쉽게 포맷 할 수 있습니다.
   파일을 변경하고 파일이 읽기 전용임을 잊어 버린 경우
여전히 그것을 써라. 를 추가하십시오! 쓰기 명령에 강제로 쓰기.

파일에서 변경을 정말로 금지하려면 다음을 수행하십시오.>

	vim -M file

이제는 텍스트를 변경하려는 모든 시도가 실패합니다. 도움말 파일은 다음과 같습니다.
예를 들면. 변경하려고 하면 이 오류 메시지가 나타납니다.

	E21: Cannot make changes, 'modifiable' is off ~

Vim이 뷰어 모드로 작동하도록 -M 인자를 사용할 수있다. 
이 명령은 보호 기능을 제거하기 때문에 자발적입니다.>

	:set modifiable
	:set write

==============================================================================
*07.7*	파일 이름 변경하기

새 파일 편집을 시작하는 영리한 방법은 필요한 대부분을 포함하는 기존 파일을 사용하는 것입니다. 
예를 들어, 새 프로그램을 작성하여 파일을 이동하십시오. 
파일을 복사하는 프로그램이 이미 있다는 것을 알고 있으므로 다음으로 시작하십시오.>

	:edit copy.c

필요없는 것을 삭제할 수 있습니다. 이제 파일을 새 이름으로 저장해야합니다. 
": saveas"명령을 이 용도로 사용할 수 있습니다 :>

	:saveas move.c

Vim은 주어진 이름으로 파일을 작성하고 그 파일을 편집합니다. 따라서
다음 번에 ": write"를하면 "move.c"라고 쓸 것입니다. "copy.c"는 변경되지 않습니다.
   편집하고있는 파일의 이름을 변경하고 싶지 않을 때
파일을 쓰고 싶다면 다음 명령을 사용할 수 있습니다 :>

	:file move.c

Vim은 파일을 "not edited"로 표시합니다. 
이것은 Vim이 편집을 시작한 파일이 아니라는 것을 의미합니다.
파일을 쓰려고 하면 다음 메시지가 표시 될 수 있습니다.

	E13: File exists (use ! to override) ~

이것은 실수로 다른 파일을 덮어 쓰지 않도록 합니다.

==============================================================================

다음장 : |usr_08.txt|  창 분할하기

저작권 : |manual-copyright|을 참조하십시오.  vim:tw=78:ts=8:ft=help:norl:
