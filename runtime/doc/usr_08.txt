* usr_08.txt * Nvim

   VIM 사용 설명서 - Bram Moolenaar 저

       창 분할하기


두 개의 다른 파일을 서로 위에 표시하십시오. 또는 파일의 두 위치를 동시에 볼 수 있습니다. 두 파일을 나란히 놓아서 차이점을 확인하십시오. 이 모든 것은 분할 된 창에서 가능합니다.

| 08.1 | 창 분할
| 08.2 | 다른 파일로 창 나누기
| 08.3 | 창 크기
| 08.4 | 수직 스플릿
| 08.5 | 창 이동
| 08.6 | 모든 창에 대한 명령
| 08.7 | 차이 모드로 차이점보기
| 08.8 | 여러
| 08.9 | 탭 페이지

     다음 장 : | usr_09.txt | GUI 사용
 이전 장 : | usr_07.txt | 둘 이상의 파일 편집
목차 : | usr_toc.txt |

======================================================================================================================================================== ================
* 08.1 * 창 분할

새 창을 여는 가장 쉬운 방법은 다음 명령을 사용하는 것입니다.>

:split

이 명령은 화면을 두 개의 창으로 나눕니다.
맨 위 :

+ ---------------------------------- +
| / * file one.c * / |
| ~ |
| ~ |
| one.c ========================================================
| / * file one.c * / |
| ~ |
| one.c ========================================================
| |
+ ---------------------------------- +

여기서 볼 수있는 것은 동일한 파일에 두 개의 창이 있습니다. "===="이있는 행은 상태 표시 줄입니다. 위 창에 대한 정보를 표시합니다. 실제로 상태 표시 줄은 역상으로 표시됩니다.
두 개의 창을 통해 동일한 파일의 두 부분을 볼 수 있습니다. 
예를 들어, 상단 창에 프로그램의 변수 선언을 표시하고 하단에는 이러한 변수를 사용하는 코드를 표시 할 수 있습니다.

CTRL-W w 명령을 사용하여 창 사이를 이동할 수 있습니다. 
맨 위 창에 있으면 CTRL-W가 그 아래 창으로 점프합니다. 하단 창에 있으면 첫 번째 창으로 건너 뜁니다. (CTRL-W CTRL-W는 CTRL 키를 나중에 놓아 두는 경우에도 똑같습니다.)


창을 닫습니다

창을 닫으려면 다음 명령을 사용하십시오.>

:close

* 08.3 * 창 크기

": split"명령은 숫자 인수를 취할 수 있습니다. 지정된 경우 새 창 높이가됩니다. 예를 들어, 다음은 3 줄 높이의 새 창을 열고 alpha.c 파일 편집을 시작합니다.>

: 3split alpha.c

기존 윈도우의 경우 여러 가지 방법으로 크기를 변경할 수 있습니다. 
제대로 작동하는 마우스를 사용하면 쉽습니다. 
마우스 포인터를 두 개의 창을 구분하는 상태 표시 줄로 이동하고 위 또는 아래로 끕니다.

창의 크기를 늘리려면 다음을 수행하십시오.>

CTRL-W +

그것을 줄이려면 :>

CTRL-W -

이 두 명령 모두 카운트를 가져 와서 여러 줄만큼 창 크기를 늘리거나 줄입니다. 
따라서 "4 CTRL-W +"는 창을 4 줄 더 높게 만듭니다.

창 높이를 지정된 줄 수로 설정하려면 :>

{높이} CTRL-W _

즉, 숫자 {높이}, CTRL-W 및 밑줄 (영문 -USB 키보드의 Shift 키와 함께 사용되는 키)입니다. 
가능한 한 높은 창을 만들려면 카운트없이 CTRL-W _ 명령을 사용하십시오.


마우스 사용

Vim에서는 키보드를 사용하여 여러 가지 작업을 매우 빠르게 처리 할 수 있습니다. 
불행하게도, 윈도우 크기 조정 명령은 꽤 많은 타이핑을 필요로 합니다. 
이 경우 마우스를 사용하는 것이 더 빠릅니다. 마우스 포인터를 상태 표시 줄 위에 놓습니다. 
이제 마우스 왼쪽 버튼을 누르고 드래그하십시오. 
상태 표시 줄이 움직이면서 한 쪽이 더 높고 다른 쪽이 더 작아집니다.


옵션

'winheight'옵션은 윈도우의 원하는 최소 높이로 설정하고 'winminheight'는 최소 최소 높이로 설정할 수 있습니다. 마찬가지로 최소 최소 너비에는 'winwidth'가 있고 최소 최소 너비에는 'winminwidth'가 있습니다. 'equalalways'옵션을 설정하면 창을 닫거나 열 때 Vim이 창 크기를 동일하게 만듭니다.

======================================================================================================================================================== ================
* 08.4 * 세로 분할

": split"명령은 현재 창 위에 새 창을 만듭니다. 창을 왼쪽에 표시하려면 다음을 사용하십시오.>

: vsplit

또는 :>
: vsplit two.c

결과는 다음과 같습니다.

+ -------------------------------------- +
| / * 파일 two.c * / | / * 파일 one.c * / |
| ~ | ~ |
| ~ | ~ |
| ~ | ~ |
| two.c ============= one.c ============= |
| |
+ -------------------------------------- +

실제로, | 중간에있는 선은 역상으로 나타납니다. 이를 수직 분리기라고합니다. 두 개의 창을 왼쪽과 오른쪽으로 구분합니다.

": vnew"명령을 사용하여 비어있는 새 파일에 세로로 분할 된 창을 엽니 다. 이 작업을 수행하는 또 다른 방법은 다음과 같습니다.>

: 세로 새 항목

": vertical"명령은 창을 분할하는 다른 명령 앞에 삽입 할 수 있습니다. 이렇게하면 해당 명령이 수평 대신 세로로 창을 분할합니다. 명령이 창을 분할하지 않으면 수정되지 않은 상태로 작동합니다.

WINDOWS 간의 이동

창을 원하는만큼 수평 및 수직으로 분할 할 수 있으므로 거의 모든 Windows 레이아웃을 만들 수 있습니다. 그런 다음이 명령을 사용하여 두 명령 사이를 이동할 수 있습니다.

CTRL-W h 왼쪽 창으로 이동
CTRL-W j는 아래 창으로 이동합니다.
CTRL-W k 위의 창으로 이동
CTRL-W l 오른쪽 창으로 이동

CTRL-W TOP 창으로 이동
CTRL-W b 아래 창으로 이동

커서를 움직일 때 사용 된 것과 같은 글자를 보게 될 것입니다. 
원한다면 커서 키를 사용할 수도 있습니다. 다른 창으로 이동하는 추가 명령 : | Q_wi |.

======================================================================================================================================================== ================
* 08.5 * 창문 이동

몇 개의 창을 나누었으나 이제는 잘못된 창에 있습니다. 
그런 다음 다른 곳으로 창을 이동하라는 명령이 필요합니다. 예를 들어 다음과 같은 세 개의 창이 있습니다.

+ ---------------------------------- +
| / * 파일 two.c * / |
| ~ |
| ~ |
| two.c ================================================================
| / * 파일 three.c * / |
| ~ |
| ~ |
| three.c ====================================================
| / * file one.c * / |
| ~ |
| one.c ========================================================
| |
+ ---------------------------------- +

분명히 마지막 것이 맨 위에 있어야합니다. 해당 창으로 이동하여 (CTRL-W w 사용)이 명령을 입력하십시오.>

CTRL-W K

이것은 대문자 K를 사용합니다. 윈도우가 맨 위로 이동한다는 것은 일어납니다. 
K가 다시 위쪽으로 이동하는 데 사용됨을 알 수 있습니다.
수직 분할이있을 때 CTRL-W K는 현재 창을 맨 위로 이동하고 Vim 창 전체 너비를 차지하게합니다. 
레이아웃 인 경우 :

+ ------------------------------------------- +
| / * two.c * / | / * three.c * / | / * one.c * / |
| ~ | ~ | ~ |
| ~ | ~ | ~ |
| ~ | ~ | ~ |
| ~ | ~ | ~ |
| ~ | ~ | ~ |
| two.c ========= three.c ========= one.c ======== |
| |
+ ------------------------------------------- +

그런 다음 가운데 창 (three.c)에서 CTRL-W K를 사용하면 다음과 같은 결과를 얻습니다.

+ ------------------------------------------- +
| / * three.c * / |
| ~ |
| ~ |
| three.c ================================== |
| / * two.c * / | / * one.c * / | |
|~		       |~		    |
|two.c==================one.c===============|
|					    |
+-------------------------------------------+

다른 세 가지 유사한 명령 (아마도 지금 추측 할 수 있습니다) :

CTRL-W H 왼쪽으로 윈도우 이동
CTRL-W J 창을 아래쪽으로 이동
CTRL-W L 오른쪽으로 윈도우 이동

======================================================================================================================================================== ================
* 08.6 * 모든 창에 대한 명령

여러 개의 창이 열려 있고 Vim을 종료하려면 각 창을 개별적으로 닫을 수 있습니다. 더 빠른 방법은이 명령을 사용하는 것입니다.>

: 톨

이것은 "모두 종료"를 의미합니다. 윈도우 중 하나라도 변경 사항이 있으면 Vim은 종료하지 않습니다. 커서가 자동으로 창에 배치됩니다.
변경. 그런 다음 ": write"를 사용하여 변경 사항을 저장하거나 ": quit!" 그들을 버리는 것.

변경 사항이있는 창이 있음을 알고 이러한 모든 변경 사항을 저장하려면 다음 명령을 사용하십시오.>

:벽

이것은 "모두 쓰기"를 의미합니다. 그러나 실제로는 변경 사항이있는 파일 만 씁니다. Vim은 변경되지 않은 파일을 작성하는 것이 이치에 맞지 않는다는 것을 알고있다. 그런 다음 ": qall"과 ": wall": "쓰기 및 모두 종료"명령의 조합이 있습니다.>

: wqall

수정 된 모든 파일을 쓰고 Vim을 종료합니다.
   마지막으로, Vim을 종료하고 모든 변경 사항을 버리는 명령이 있습니다.>

: qall!

조심해라,이 명령을 되돌릴 방법이 없다!


모든 논쟁의 여지가있는 창 열기

Vim이 각 파일에 대한 창을 열려면 "-o"인수로 시작하십시오.>

vim -o one.txt two.txt three.txt

결과는 다음과 같습니다.

+ ------------------------------- +
| 파일 one.txt |
| ~ |
| one.txt ======================== |
| 파일 two.txt |
| ~ |
| two.txt ======================== |
| 파일 three.txt |
| ~ |
| three.txt ====================== |
| |
+ ------------------------------- +

"-O"인수는 세로로 분할 된 창을 가져 오는 데 사용됩니다.
   Vim이 이미 실행 중이면 ": all"명령은 인수 목록에있는 각 파일에 대한 창을 엽니다. 
   ": vertical all"은 수직으로 나눕니다.

======================================================================================================================================================== ================
* 08.7 * diff 모드로 차이점보기

두 파일 간의 차이점을 보여주는 Nvim을 시작하는 특별한 방법이 있습니다. 
파일 "main.c"를 가져와 한 줄에 몇 개의 문자를 삽입합시다. 
백업 파일 "main.c ~"에 이전 버전의 파일이 포함될 수 있도록 'backup'옵션이 설정된이 파일을 작성하십시오.
쉘에서이 명령을 입력하면 diff 모드에서 Nvim을 시작할 수 있습니다 :>

nvim -d main.c ~ main.c

Vim은 두 개의 창을 나란히두고 시작합니다. 
문자를 추가 한 선과 그 위와 아래에 몇 줄만 표시됩니다.

	 VV		      VV
	+-----------------------------------------+
	|+ +--123 lines: /* a|+ +--123 lines: /* a|  <- fold
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	changed text	  |  <- changed line
	|  text		     |	text		  |
	|  text		     |	------------------|  <- deleted line
	|  text		     |	text		  |
	|  text		     |	text		  |
	|  text		     |	text		  |
	|+ +--432 lines: text|+ +--432 lines: text|  <- fold
	|  ~		     |	~		  |
	|  ~		     |	~		  |
	|main.c~==============main.c==============|
	|					  |
	+-----------------------------------------+

(이 그림에는 강조 표시가 나타나지 않으므로 "nvim -d"를 사용하십시오.)

수정되지 않은 행은 하나의 행으로 축소되었습니다. 
이를 닫힌 접기라고합니다. 
그림에 "<- fold"로 표시되어 있습니다. 
따라서 상단의 단일 접기 선은 123 개의 텍스트 줄을 나타냅니다. 
이 두 줄은 두 파일에서 동일합니다. 
"<- 변경된 선"으로 표시된 선이 강조 표시되고 삽입 된 텍스트가 다른 색으로 표시됩니다. 
이것은 분명히 두 파일 사이의 차이점을 보여줍니다.
삭제 된 행은 main.c 창에 "---"과 함께 표시됩니다. 
그림에서 "<- 삭제 된 선"표시를보십시오. 
이 문자들은 실제로 존재하지 않습니다. 
그들은 main.c를 채우기 만하므로 다른 창과 같은 수의 행을 표시합니다.

폴드 열

각 창에는 왼쪽에 약간 다른 배경이 있는 열이 있습니다. 
위 사진에서 "VV"로 표시되어 있습니다. 
거기에 플러스 문자가 있으며 닫힌 각 폴드 앞에 표시됩니다. 
해당 플러스로 마우스 포인터를 이동하고 왼쪽 버튼을 클릭하십시오. 
스크롤바가 열리 며 스크롤바에 포함 된 텍스트를 볼 수 있습니다.
폴드 열에는 열린 폴드에 빼기 기호가 있습니다. 
이 버튼을 클릭하면 폴드가 닫힙니다.
분명히 이것은 작동하는 마우스가있을 때에만 작동합니다. 
또한 "zo"를 사용하여 폴드를 열고 "zc"를 사용하여 폴드를 닫을 수 있습니다.

VIM에서의 차이

diff 모드에서 시작하는 또 다른 방법은 Vim 내부에서 수행 할 수 있습니다. 
"main.c"파일을 편집 한 다음 분할하여 차이점을 표시하십시오.>

main.c 편집
: 수직 diffsplit main.c ~

": vertical"명령은 창을 수직으로 분할하는 데 사용됩니다. 
이것을 생략하면 수평 분할이 생깁니다.

패치 또는 diff 파일이있는 경우 세 번째 방법을 사용하여 diff 모드를 시작할 수 있습니다. 
먼저 패치가 적용되는 파일을 편집하십시오. 그런 다음 Vim에게 패치 파일의 이름을 알려주십시오 :>

main.c 편집
: 수직 diffpatch main.c.diff

경고 : 패치 파일에는 편집중인 파일에 대한 패치가 하나만 있어야 합니다. 
그렇지 않으면 많은 오류 메시지가 표시되고 예기치 않게 일부 파일이 패치 될 수 있습니다.
패치는 Vim에있는 파일의 사본에만 수행됩니다. 하드 디스크에 있는 파일은 수정되지 않은 상태로 유지됩니다 (파일을 작성하기 전까지).

스크롤 바 인딩

파일에 더 많은 변경 사항이 있으면 일반적인 방법으로 스크롤 할 수 있습니다. 
Vim은 두 창을 같은 위치에서 시작하도록 노력할 것이므로 차이점을 쉽게 비교할 수 있습니다.
잠시 동안 원하지 않으면이 명령을 사용하십시오 :>

: noscrollbind 설정

변화 추세

어떤 식 으로든 폴딩을 비활성화하면 변경 사항을 찾기가 어려울 수 있습니다. 
다음 명령으로 건너 뛰려면이 명령을 사용하십시오.>

]기음

다른 방향으로 이동하려면 다음을 사용하십시오.>

[기음

더 멀리 뛰기 위해 카운트를 앞쪽으로 올렸습니다.


변경 사항 제거

한 창에서 다른 창으로 텍스트를 이동할 수 있습니다. 
이렇게하면 차이가 제거되거나 새로운 차이가 추가됩니다. 
Vim은 모든 상황에서 강조 표시를 유지하지 않습니다. 
업데이트하려면 다음 명령을 사용하십시오.>

: diffupdate

차이를 제거하려면 강조 표시된 블록의 텍스트를 한 창에서 다른 창으로 이동할 수 있습니다. 
위의 "main.c"및 "main.c ~"예제를 사용하십시오. 
커서를 다른 창에서 삭제 된 행의 왼쪽 창으로 이동하십시오.
이제 다음 명령을 입력하십시오 :>

DP

변경 내용은 현재 창 텍스트를 다른 창에 놓음으로써 제거됩니다. 
"dp"는 "diff put"의 약자입니다. 다른 방법으로도 할 수 있습니다. 
커서를 오른쪽 창으로 이동하여 "changed"가 삽입 된 행으로 이동하십시오. 
이제 다음 명령을 입력하십시오 :>

해야 할 것

이제 다른 창에서 텍스트를 가져 와서 변경 사항이 제거됩니다. 
지금 남아있는 변경 사항이 없으므로 Vim은 모든 텍스트를 닫힌 폴드에 넣습니다. 
"do"는 "diff 얻기"를 의미합니다. 
"dg"는 더 좋았지만 이미 다른 의미를 가지고 있습니다("dgg"는 커서에서 첫 번째 줄까지 삭제됩니다).
diff 모드에 대한 자세한 내용은 | diff-mode |를 참조하십시오.

==============================================================================
* 08.8 * 다양한

'laststatus'옵션은 마지막 창에 상태 표시 줄이있는시기를 지정하는 데 사용할 수 있습니다.

0 never
1 분할 창이있는 경우에만 (태만)
2 always

다른 파일을 편집하는 많은 명령에는 창을 분할하는 변형이 있습니다.
명령 줄 명령의 경우 "s"를 앞에 붙여서 수행합니다. 예 :
":tag"는 태그로 점프하고, ": stag"는 창을 나눕니다.
꼬리표. 일반 모드 명령의 경우 CTRL-W가 앞에 붙습니다. CTRL- ^
대체 파일 인 CTRL-W CTRL- ^은 창을 분할하고 대체 파일을 편집합니다.

'splitbelow'옵션을 설정하면 새 창을 현재 창. 
'splitright'옵션을 설정하여 수직으로 분할 할 수 있습니다.
창이 현재 창 오른쪽에 나타납니다.

창을 분할 할 때 수정자 명령을 추가하여 창이 나타납니다.

: leftabove {cmd}는 현재 창 왼쪽 또는 위
: aboveleft {cmd} idem
: rightbelow {cmd}는 현재 창 오른쪽 또는 아래에 있습니다.
: belowright {cmd} idem
: Vim 창의 위쪽이나 왼쪽에있는 topleft {cmd}
: Vim 창의 아래 또는 오른쪽에있는 botright {cmd}

========================================================================================================================================================================
* 08.9 * 탭 페이지

당신은 창이 겹치지 않는다는 것을 알아 차렸을 것입니다. 그건 네가 빨리 달리는 것을 의미합니다.
화면 공간 밖. 이것에 대한 해결책은 탭 페이지라고 합니다.

"thisfile"을 편집한다고 가정합니다. 새 탭 페이지를 만들려면 이 명령을 사용하십시오.>

: tabedit thatfile

전체 Vim을 차지하는 창에서 "thatfile"파일을 편집합니다.
창문. 그리고 맨 위에는 두 개의 파일 이름이있는 막대가 있습니다.

+ ---------------------------------- +
| thisfile | / thatfile / __________ X | (그 파일은 굵게 표시됩니다)
| / *  thatfile * / |
| that				   	  |
| that				   	  |
| ~                 |
| ~                 |
| ~                 |
|                   |
+ ---------------------------------- +

이제 두 개의 탭 페이지가 있습니다. 첫 번째 창에는 "thisfile"과
두 번째는 "thatfile"을 위한 창입니다. 맨 위에 있는 두 페이지와 같습니다.
각 페이지에서 파일 이름이 표시된 탭이 튀어나와 있습니다.

이제 마우스를 사용하여 맨 위 줄에 있는 "thisfile"을 클릭하십시오. 
결과는 다음과 같습니다.

+ ---------------------------------- +
| /thisfile / | thatfile __________ X | (이 파일은 굵은 글씨체 임)
| / *thisfile * / |
|this				   |
|this				   |
| ~            |
| ~            |
| ~            |
|              |
+ ---------------------------------- +

따라서 상단의 레이블을 클릭하여 탭 페이지간에 전환 할 수 있습니다
선. 마우스가 없거나 사용하고 싶지 않은 경우 "gt"
명령. 니모닉 : Goto Tab.

이제 다음 명령을 사용하여 다른 탭 페이지를 만듭니다.>

: tab split

그러면 동일한 버퍼를 편집하는 하나의 창을 가진 새 탭 페이지가 만들어집니다.
우리가 있었던 창 :

+ ------------------------------------- +
| thisfile | /thisfile / | thatfile __X | (이 파일은 굵은 글씨체 임)
| / * thisfile * / |
|this				      |
|this				      |
| ~               |
| ~               |
| ~               |
|                 |
+ ------------------------------------- +

창을 여는 Ex 명령 앞에 ": tab"을 넣을 수 있습니다. 
창은 새 탭 페이지에서 열 수 있습니다. 다른 예 :>

: tab help gt

새 탭 페이지에서 "gt"에 대한 도움말 텍스트를 표시합니다.

탭 페이지로 할 수있는 몇 가지 추가 작업 :

- 마지막 레이블 뒤에있는 공간에서 마우스로 클릭하십시오.
"gt"와 같이 다음 탭 페이지가 선택됩니다.

- 오른쪽 상단의 "X"를 마우스로 클릭하십시오.
현재 탭 페이지가 닫힙니다. 저장하지 않으면
현재 탭 페이지의 변경 사항

- 상단 라인에서 마우스로 더블 클릭
새 탭 페이지가 생성됩니다.

- "tabonly"명령
현재 탭 페이지를 제외한 모든 탭 페이지를 닫습니다. 저장하지 않으면
다른 탭 페이지의 변경 사항.

탭 페이지에 대한 자세한 정보는 | tab-page |를 참조하십시오.

======================================================================================================================================================== ================

다음 장 : | usr_09.txt | GUI 사용

저작권 : | manual-copyright | vim : tw = 78 : ts = 8 : ft = help : norl :
