#             Welcome   to   the   VIM   Tutor

빔 (Vim)은 많은 명령을 가진 매우 강력한 편집기이며, 이와 같은 텍스트로  
설명하기에는 기능이 너무 많은 편집기입니다. 이 튜터는 Vim을 다목적 편집기로 
쉽게 사용할 수있는 명령을 충분히 설명하도록 고안되었습니다. 이 텍스트는 사용법을 
가르치기 위해 생성되었다는 것을 기억하는 것이 중요합니다. 즉, 올바르게 학습하려면
연습을해야합니다. 이 텍스트만 읽으면 vim의 중요한 기능들을 곧 잊어 버릴 것입니다!

지금 당장 Shift-Lock 키가 눌러지지 않았는지 확인하고`j` {normal} 키를 충분히 
길게 눌러 커서를 움직여 Lesson 0이 화면을 완전히 채우도록합니다.

# Lesson 0

참조: lesson의 명령은 텍스트를 수정하지만 변경 사항은 저장되지 않습니다.
일을 망칠 걱정은하지 마십시오; 
[<Esc>] (<Esc>)를 누른 후 [u] (u)를 누르면 최신 변경 사항이 취소됩니다.

이 tutorial은 대화식이며 알아 두어야 할 몇 가지 사항이 있습니다.
[holy-grail]로 강조 표시된 텍스트 위에 [<Enter>] (<Enter>) 키를 누르면 관련 도움말 (잘하면)으로 이동하게되며,
단어 위에 K를 누르는 것 또한 도움말로 이동하게됩니다.때로는 텍스트를 다음과 같이 수정할 필요가 있습니다.

--->  this here {expect:this here}
변경 사항을 올바르게 완료하면 왼쪽의 ✗ 기호가 ✓로 변경됩니다. Vim이 얼마나 깔끔한 지 이미 볼 수 있다고 생각합니다. :)
다른 시간에 명령을 실행하라는 메시지가 표시됩니다 (나중에 설명하겠습니다) :
~~~ cmd
    :help <Enter>
~~~
or press a sequence of keys
~~~ normal
    <Esc>0f<Space>d3wP$P
~~~

<s>와 <> 안에있는 텍스트 (`<Enter>`{normal}처럼)는 텍스트 대신에 누르는 키를 나타냅니다.

자, 다음 레슨으로 이동하겠습니다 (j를 사용하는걸 기억하세요).

## Lesson 1.1: CURSOR 움직이기

** 커서를 움직이려면 표시된대로 'h', 'j', 'k', 'l'키를 누르십시오. **

         ↑
         k          Hint: h 키는 왼쪽에 있고 왼쪽으로 이동합니다.
     ← h   l →            l 키는 오른쪽에 있고 오른쪽으로 움직입니다.
         j                j 키는 아래쪽 화살표처럼 보입니다..
         ↓

  1. 당신이 편안해질 때까지 화면에서 커서를 움직입니다.

  2. 반복 될 때까지 아래쪽 키 (j)를 누르고 있습니다.
     이제 다음 강의로 이동하는 방법을 알게되었습니다.

  3. 아래쪽 키를 사용하여 1.2 단원으로 이동하십시오.

참조: 입력 한 내용을 모르는 경우 <Esc> 키를 눌러 일반 모드로 전환하십시오.
     그런 다음 원하는 명령을 다시 입력하십시오..

참조: 커서 키도 작동해야합니다.  B그러나 hjkl을 사용하면 익숙해지면 훨씬
     더 빨리 이동할 수 있습니다. Really!

# Lesson 1.2: VIM 나가기

!! 참조: 아래 단계 중 하나를 실행하기 전에 이 전체 lesson을 읽어보십시오 !!

  1. <Esc> 키를 눌러 [표준 모드] ()에 있는지 확인하십시오.

  2. 입력:

    `:q!`{vim} `<Enter>`{normal}.

     편집기를 종료하고 변경 사항을 취소합니다.

  3. vim을 열고 이 tutor로 들어오는 명령을 실행하여 여기로 돌아 오십시오. 
     다음의 명령어입니다:

     :Tutor <Enter>

  4. 이 단계들을 암기하고 확신이 있다면, 1 ~ 3 단계를 끝내고 편집기를 다시 실행하십시오.

참조:  [: q!] (: q) <Enter>는 변경 한 내용을 무시합니다.  
      몇 가지 과정을 통해 변경 사항을 파일에 저장하는 방법을 배우게됩니다.

  5. 커서를 1.3 단원으로 내립니다.

## Lesson 1.3: 텍스트 편집 - 삭제

** `x` {normal}을 눌러 커서 아래의 문자를 삭제하십시오. **

1. 커서를 ---> 표시가있는 행으로 이동하십시오.

2. 오류를 수정하려면 삭제할 문자 위에 커서가 나타날 때까지 커서를 이동하십시오.

3. [x 키] (x)를 눌러 원하지 않는 문자를 삭제하십시오.

4. 문장이 정확해질 때 까지 2-4 단계를 반복하십시오.

---> The ccow jumpedd ovverr thhe mooon. {expect:The cow jumped over the moon.}

5. 문장이 올바르면 1.4 단계로 이동하십시오.

참조: 이 tutor를 통해 배워가면서 암기하보다는 직접 사용해보십시오.

# Lesson 1.4: 텍스트 편집 : 삽입

** 'i` {normal}을 눌러 텍스트를 삽입하십시오. **

  1. 커서를 ---> 표시가있는 첫 번째 줄로 이동하십시오.

  2. 첫 번째 줄을 두 번째 줄과 동일하게 만들려면 텍스트를
    삽입 할 위치의 첫 번째 글자 위에 커서를 이동하십시오.

  3. i를 누르고 필요한 추가 내용을 입력하십시오.

  4. 각 오류가 수정되면 <Esc> 키를 눌러 일반 모드로 돌아갑니다.
     문장을 수정하려면 2-4 단계를 반복하십시오.

---> There is text misng this . {expect:There is some text missing from this line.}
---> There is some text missing from this line. {expect:There is some text missing from this line.}

  5. 편안하게 텍스트를 삽입하면 1.5 lesson으로 이동합니다.

# Lesson 1.5: 텍스트 편집 : 첨부

** `A` {normal}를 눌러 텍스트를 추가하십시오. **

  1. 커서를 ---> 표시가있는 첫 번째 줄로 이동하십시오.
     커서가 해당 행에있는 어떤 문자에 있는지는 중요하지 않습니다.

  2. [A] (A)를 누르고 필요한 추가 내용을 입력하십시오.
  
  3. 텍스트가 추가되면 <Esc> 키를 눌러 일반 모드로 돌아갑니다.

  4. 커서를 --->로 표시된 두 번째 줄로 이동하고 2 단계와 3 단계를
     반복하여이 문장을 수정하십시오.

---> There is some text missing from th {expect:There is some text missing from this line.}
---> There is some text missing from this line. {expect:There is some text missing from this line.}
---> There is also some text miss {expect:There is also some text missing here.}
---> There is also some text missing here. {expect:There is also some text missing here.}

  5. 당신이 편안하게텍스트를 추가하면 lesson 1.6으로 이동합니다.

# Lesson 1.6: 파일 편집

** `:wq`{vim}을 사용하여 파일을 저장하고 종료하십시오. **

!! 참조: 아래 단계 중 하나를 실행하기 전에이 전체 lesson을 읽으십시오. !!

  1. 1.2과 마찬가지로 이 tutor를 종료하십시오.:  :q!
     또는 다른 터미널에 액세스 할 수있는 경우 다음을 수행하십시오.

  2. 쉘 프롬프트에서 다음 명령을 입력하십시오 :
~~~ sh
     $ vim tutor
~~~
     'vim'은 Vim 편집기를 시작하는 명령이고 'tutor'는 편집하려는 파일의 이름입니다.
     변경 될 수있는 파일을 사용하십시오.

  3. 이전 강의에서 배운대로 텍스트를 삽입하고 삭제하십시오.

  4. 변경 사항을 저장하고 Vim을 종료하십시오.
~~~ cmd
     :wq
~~~

     명령을 실행하려면`<Enter> '를 눌러야합니다.

  5. 1 단계에서 vimtutor를 종료 한 경우 vimtutor를 다시 시작하고 다음 요약으로 이동하십시오.

  6. 위의 단계를 읽고 이해 한 후: do it.

# Lesson 1 요약

  1. 커서는 화살표 키 또는 hjkl 키를 사용하여 이동합니다.
     h (left)   j (down)       k (up)       l (right)

  2. 쉘 프롬프트에서 Vim을 시작하려면 다음을 입력하십시오 :

~~~ sh
    $ vim FILENAME
~~~

  3. 빔 종료 명령어:     <Esc>   :q!   <Enter>  모든 변경이 저장되지않습니다.
        혹은:      <Esc>   :wq   <Enter>  변경이 저장됩니다.

  4. 커서에서 문자를 삭제하려면 :`x` {normal}

  5. 텍스트 유형을 삽입하거나 추가하려면 다음을 수행하십시오.
     `i`{normal} type inserted text `<Esc>`{normal}     insert before the cursor
     `A`{normal} type appended text `<Esc>`{normal}     append after the line

참조: `<Esc>`{normal}을 누르면 노멀 모드로 들어가고, 불필요하거나 부분적으로 완료된 명령을 취소합니다.

이제 lesson2를 계속 진행하십시오..

# Lesson 2.1: 삭제 명령

** `dw` {normal}를 입력하여 단어를 삭제하십시오. **

  1. `<Esc>`{normal}을 눌러 당신이 Normal 모드인지 확인하십시오.

  2. 커서를 ---> 표시가있는 행으로 이동하십시오.

  3. 커서를 삭제해야하는 단어의 시작 부분으로 이동하십시오.

  4. 단어를 사라지게하려면 [d] (d) [w] (w)를 입력하십시오..

---> 이 문장에서 종이에 속하지 않는 재미있는 단어가 있습니다. {expect:이 문장에는 속하지 않는 단어가 있습니다.}

  5. 문장이 완성될 때까지 3-4 단계를 반복하고 2.2 단원으로갑니다.

# Lesson 2.2: 추가 삭제 명령

** `d$`{normal}을 입력하여 줄 끝까지 삭제하십시오. **

  1. <Esc> 키를 눌러 표준 모드에 있는지 확인하십시오.

  2. 커서를 ---> 표시가있는 행으로 이동하십시오.

  3. 커서를 올바른 행의 끝으로 이동하십시오 (첫 번째 행 이후).

  4. `d $`{normal}을 입력하여 줄 끝까지 삭제하십시오.

---> Somebody typed the end of this line twice. end of this line twice. {expect:ANYTHING}

  5. 2.3 단원으로 이동하여 어떤 일이 일어나고 있는지 이해하십시오.

# Lesson 2.3: ON OPERATORS AND MOTIONS


텍스트를 변경하는 많은 명령은 [operator](operator)와 [motion](navigation)에서 만들어집니다.
[d] (d) 삭제 연산자가있는 삭제 명령의 형식은 다음과 같습니다.

    d   motion

  Where:
    d      - 삭제 연산자입니다..
    motion - is what the operator will operate on (listed below).

  짧은 동작 목록:
    [w](w) - 다음 단어의 시작 부분까지 (첫 번째 문자 제외).
    [e](e) - 마지막 글자를 포함하여 현재 단어의 끝까지.
    [$]($) - 마지막 문자를 포함하여 줄 끝까지.

  따라서`de` {normal}을 입력하면 커서에서 단어의 끝까지 삭제됩니다.

참조:  operator가 없는 일반 모드에서 키보드를 누르면 지정된대로 커서가 움직입니다.

# Lesson 2.4: USING A COUNT FOR A MOTION

** 동작이 여러 번 반복되기 전에 숫자를 입력하십시오. **

  1. 아래의 ---> 표시된 행의 시작 부분으로 커서를 이동하십시오.

  2. `2w` {normal}를 입력하여 커서를 두 단어 앞으로 이동시킵니다.

  3. `3e` {normal}를 입력하여 커서를 세 번째 단어 앞으로 끝까지 이동하십시오.

  4. 행의 시작 부분으로 이동하려면`0` {normal} ([zero] (0))을 입력하십시오.

  5. 단계 2와 3을 다른 번호로 반복하십시오.

---> 이것은 당신 주위에 움직일 수 있는 단어가있는 줄에 불과합니다. {expect : ANYTHING}

  6. Lesson 2.5로 이동하십시오.

# Lesson 2.5: 추가 삭제를 위해 사용

** 연산자로 숫자를 입력하면 여러 번 반복됩니다. **

위에서 언급 한 삭제 연산자와 모션 조합에서 모션을 삭제하기 전에 더 많은 count를 삽입합니다:

     d   number   motion

  1. 커서를 --->로 표시된 줄의 첫 번째 대문자 단어로 이동하십시오.

  2. 두 개의 대문자 단어를 삭제하려면`d2w` {normal}을 입력하십시오

  3. 하나의 명령으로 연속 대문자 단어를 삭제하려면 다른 count로 1단계와 2단계를 반복하십시오

---> this ABC DE line FGHI JK LMN OP of words is Q RS TUV cleaned up. {expect:this line of words is cleaned up.}

# Lesson 2.6: 라인에서 작동

** 전체 줄을 삭제하려면 dd를 입력하십시오.. **

  전체 줄 삭제의 빈도로 인해 Vi의 설계자는 단순히 줄을 지우려면 
  2개의 d를 입력하는 것이 더 쉽다고 결정했습니다.

  1. 커서를 아래 구의 두 번째 줄로 이동하십시오.
  2. 행을 삭제하려면 [dd] (dd)를 입력하십시오.
  3. 이제 네 번째 줄로 이동하십시오.
  4. `2dd` {normal}를 입력하여 두 줄을 삭제하십시오.

--->  1)  Roses are red, {expect:ANYTHING}
--->  2)  Mud is fun, {expect:ANYTHING}
--->  3)  Violets are blue, {expect:ANYTHING}
--->  4)  I have a car, {expect:ANYTHING}
--->  5)  Clocks tell time, {expect:ANYTHING}
--->  6)  Sugar is sweet {expect:ANYTHING}
--->  7)  And so are you. {expect:ANYTHING}

# Lesson 2.7: 명령 취소

** 마지막 명령을 실행 취소하려면 u를 누르고, 전체 행을 수정하려면 U를 누르십시오. **

  1. 커서를 ---> 표시가있는 행으로 이동시키고 첫 번째 오류에 놓습니다.
  2. 첫 번째 원치 않는 문자를 삭제하려면`x` {normal}을 입력하십시오.
  3. 이제, 실행 된 마지막 명령을 취소하려면`u` {normal}을 입력하십시오.
  4. 이번에는`x` {normal} 명령을 사용하여 줄의 모든 에러를 수정합니다.
  5. 이제 라인을 원래 상태로 되돌리기 위해 대문자`U` {normal}을 입력하십시오.
  6. 이제 U와 이전 명령을 실행 취소하려면`u` {normal}를 몇 번 입력하십시오.
  7. 이제`<Ctrl-r>`{normal}을 몇 번 눌러 명령을 다시 실행하십시오 (실행 취소를 취소하십시오).

---> Fiix the errors oon thhis line and reeplace them witth undo. {expect:Fix the errors on this line and replace them with undo.}

  8. 이것은 매우 유용한 명령입니다. Lesson2 단원 요약으로 이동하십시오.

# Lesson 2 요약

  1. 다음 단어 유형까지 커서에서 삭제하려면 :`dw` {normal}
  2. 커서에서 라인의 끝까지 삭제하려면 :`d $`{normal}
  3. 전체 라인을 지우려면 :`dd` {normal}
  4. 모션을 반복하려면 번호 앞에 숫자를 추가하십시오 :`2w` {normal}

  5. 변경 명령의 형식은 다음과 같습니다.:
               operator   [number]   motion
     where:
       operator -   [d] (d)와 같이 수행 할 작업입니다.
       [number] -   모션을 반복하는 optional count입니다.
       motion   -   다음과 같이 작동 할 텍스트 위로 이동합니다.:
                        [w](w) (word),
                        [$]($) (to the end of line), etc.

  6. 줄의 시작 부분으로 이동하려면 0을 사용하십시오 : [0] (0)

  7. 이전 작업을 취소하려면 다음을 입력하십시오 :`u` {normal} (소문자 u)
     행의 모든 변경 사항을 취소하려면 다음을 입력하십시오 :`U` {normal} (대문자 U)
     실행 취소를 실행 취소하려면 다음을 입력하십시오 :`<Ctrl-r>`{normal}

# Lesson 3.1: PUT 명령

** 이전에 삭제 된 텍스트를 커서 뒤에 넣으려면 p를 입력하십시오. **

  1. 커서를 아래의 첫 번째 ---> 줄로 이동하십시오.

  2. 행을 삭제하고 Vim 레지스터에 저장하려면`dd` {normal}을 입력하십시오.

  3. 커서를 c) 행으로 이동하십시오(삭제 된 행이 이동해야하는 위치).

  4. `p` {normal}을 입력하여 커서를 커서 아래에 놓습니다.

  5. 2 ~ 4 단계를 반복하여 모든 줄을 올바른 순서로 놓습니다..

---> d) Can you learn too? {expect:ANYTHING}
---> b) Violets are blue, {expect:ANYTHING}
---> c) Intelligence is learned, {expect:ANYTHING}
---> a) Roses are red, {expect:ANYTHING}

# Lesson 3.2: 교체 명령어

** `rx` {normal}를 입력하여 커서의 문자를 x로 바꿉니다. **

  1. 커서를 ---> 표시가있는 첫 번째 줄로 이동하십시오.

  2. 첫 번째 오류의 맨 위에 커서가 있도록 커서를 이동하십시오.

  3. 'r` {normal}을 입력하고 거기에 있어야 할 문자를 입력하십시오.

  4. 첫 번째 줄이 두 번째 줄과 같아질 때까지 2 단계와 3 단계를 반복하십시오.

---> Whan this lime was tuoed in, someone presswd some wrojg keys! {expect:When this line was typed in, someone pressed some wrong keys!}
---> When this line was typed in, someone pressed some wrong keys! {expect:When this line was typed in, someone pressed some wrong keys!}

  5. 이제 Lesson 3.3으로 넘어가십시오.

참조: 암기가 아닌 실습을 통해 배우는 것을 기억하십시오.

# Lesson 3.3: 변경 OPERATOR

** 단어의 끝까지 변경하려면`ce` {normal}을 입력하십시오.  **

  1. 커서를 ---> 표시가있는 첫 번째 줄로 이동하십시오.

  2. "lubw"의 "u"에 커서를 놓습니다.

  3. `ce`{normal}와 올바른 단어를 입력하십시오 (이 경우 "ine"를 입력하십시오).

  4. `<Esc>`{normal}을 누르고 변경해야 할 다음 문자로 이동하십시오.

  5. 첫 번째 문장이 두 번째 문장과 같아질 때까지 3-4 단계를 반복합니다.

---> This lubw has a few wptfd that mrrf changing usf the change operator. {expect:This line has a few words that need changing using the change operator.}
---> This line has a few words that need changing using the change operator. {expect:This line has a few words that need changing using the change operator.}

[c](c)e는 단어를 삭제하고 삽입 모드로 전환합니다.

# Lesson 3.4: c를 사용한 더 많은 변경

** 변경 연산자는 delete와 같은 동작으로 사용됩니다. **

  1. 변경 연산자는 삭제와 같은 방식으로 작동합니다.  형식은 다음과 같습니다:

         c    [number]   motion

  2. `w` {normal} (단어)와`$`{normal} (줄의 끝)과 같은 동작이 동일합니다.
  3. ---> 표시가있는 첫 번째 줄로 이동하십시오.

  4. 커서를 첫 번째 오류로 이동하십시오.

  5. c$`{normal}을 입력하고 두번째 줄과 같이 나머지 줄을 입력하고`<Esc>`{normal}을 누르십시오.

---> The end of this line needs some help to make it like the second. {expect:The end of this line needs to be corrected using the  c$  command.}
---> The end of this line needs to be corrected using the  c$  command. {expect:The end of this line needs to be corrected using the  c$  command.}

참조:  입력하는 동안 Backspace 키를 사용하여 실수를 수정할 수 있습니다.

# Lesson 3 요약

  1. 방금 삭제 한 텍스트를 되돌리려면 [p] (p)를 입력하십시오.  
     이렇게하면 삭제 된 텍스트가 커서 뒤에 놓입니다 (줄이 삭제 된 경우 커서 아래 줄에 표시됩니다).

  2. 커서 아래의 문자를 바꾸려면 [r] (r)을 입력하고 문자를 입력하십시오.

  3. [변경 연산자] (c)를 사용하면 커서에서 모션이있는 곳으로 이동할 수 있습니다. 
     예 : `ce` {normal}을 입력하여 커서의 끝에서 단어의 끝,`c $`{normal}을 
     바꿔서 줄 끝으로 변경하십시오.

  4. 변경 형식은 다음과 같습니다:

     c   [number]   motion

이제 다음 강의로 이동하십시오..

# Lesson 4.1: 커서 위치 및 파일 상태

** `<Ctrl-g>`{normal}을 입력하여 파일의 위치와 파일 상태를 표시하십시오.
 파일의 한 줄로 이동하려면`G` {normal}을 입력하십시오. **

참조: 이 단계를 실행하기 전에이 전체 lesson을 읽으십시오!!

  1. `<Ctrl>`{일반}} 키를 누른 채로`g`{일반} 키를 누릅니다. 우리는 이것을`<Ctrl-g>`{normal}이라고 합니다
     페이지 하단에 파일의 이름과 위치가 함께 메시지로 표시됩니다.  3단계의 줄 번호를 기억하십시오.

참조:  화면 오른쪽 하단에 커서 위치가 표시 될 수 있습니다. 
      ['ruler']('ruler') 옵션이 설정된 경우에 발생합니다 (:help 'ruler 참조).

  2. [G](G)를 눌러 파일의 맨 아래로 이동하십시오.
     [gg](gg)를 입력하여 파일의 시작 부분으로 이동하십시오.

  3. 현재 사용하고있는 행 번호를 입력 한 다음`G` {normal}을 입력하십시오.  
     이렇게하면`<Ctrl-g>`{normal}을 눌렀을 때의 라인으로 되돌아갑니다.

  4. 이 작업을 수행 할 확신이 든다면 1-3 단계를 실행하십시오.

# Lesson 4.2: 검색 명령

** `/`{normal} 다음에 검색 할 구를 입력하십시오. **

  1. 노멀 모드에서는`/`{normal} 문자를 입력하십시오.  
     이 명령과 커서는 : 명령과 같이 화면 맨 아래에 나타납니다.
  
  2. 이제 'errroor'<Enter>`{normal}을 입력하십시오. 검색하려는 단어입니다.

  3. 동일한 구문을 다시 검색하려면 [n] (n)을 입력하기 만하면됩니다.
     반대 방향으로 같은 구를 검색하려면 [N] (N)을 입력하십시오.

  4. 역방향으로 구문을 검색하려면 / 대신 [?] (?)를 사용하십시오.

  5. `<Ctrl-o>`{normal} (문자 o를 누른 상태에서 Ctrl 키를 누른 상태)를 눌러서 돌아가십시오.
     추가로 돌아가려면 반복하십시오. `<Ctrl-i>`{normal}은 앞으로 이동합니다.

---> "errroor"는 철자를 쓰는 방법이 아닙니다. errroor는 오류입니다. {expect:ANYTHING}

참조: 검색이 파일의 끝에 도달하면 [ 'wrapscan'] ( 'wrapscan') 옵션이
     재설정되지 않은 한 시작시 검색이 계속됩니다.

# Lesson 4.3: PARTIESES 검색과 일치

** 일치하는 것을 찾으려면`%`{normal}을 입력하십시오),], 또는}. **

  1. 커서를 임의의 (, [, 또는 {아래 줄에 --->로 표시하십시오.

  2. 이제 [%](%) 문자를 입력하십시오.

  3. 커서가 일치하는 괄호 또는 대괄호로 이동합니다.

  4. 커서를 다른 대괄호로 이동하려면`%`{normal}을 입력하십시오.

  5. 커서를 다른 (,), [,], {또는}로 이동시키고`%`{normal}이 어떤 기능을 하는지보십시오.

---> 이것은(( 's, [s]와 {s}가있는 테스트 라인입니다.)) {expect : ANYTHING}

참조: 이는 괄호 안의 프로그램을 디버깅 할 때 매우 유용합니다!

# Lesson 4.4: 대체 명령

** `:s/old/new/g`를 입력하여 "old"를 "new"로 대체하십시오. **

  1. 커서를 ---> 표시가있는 행으로 이동하십시오.

  2. 입력하십시오
~~~ cmd
    :s/thee/the/
~~~

    참고 : [: s] (: s) 명령은 줄에서 "thee"의 첫 번째 항목 만 변경했습니다.

  3. 이제 입력하세요
~~~ cmd
     :s/thee/the/g
~~~

     g [플래그] (: s_flags)를 추가하면 해당 줄에서 전역으로 대체되고 줄의 "thee"가 모두 변경됩니다

---> thee best time to see thee flowers is in thee spring. {expect:the best time to see the flowers is in the spring.}

  4. 두 줄 사이의 모든 문자열을 변경하려면, 입력하십시오
~~~ cmd
     :#,#s/old/new/g
~~~
     여기서 #, #는 대체가 수행되는 행 범위의 행 번호입니다.

     입력
~~~ cmd
     :%s/old/new/g
~~~
     전체 파일에서 모든 변경사항을 변경합니다.

     입력
~~~ cmd
     :%s/old/new/gc
~~~
     대체 할 것인지 묻는 메시지와 함께 전체 파일에서 모든 항목을 찾습니다.

# Lesson 4 요약

  1. `<Ctrl-g>`{normal}     파일의 위치와 파일 상태를 표시합니다.
             `G`{normal}    파일의 끝으로 이동합니다.
     number  `G`{normal}    해당 행 번호로 이동합니다.
            `gg`{normal}    첫 번째 줄로 이동합니다.

  2. `/`{normal} 다음에 구문을 입력하면 구문이 FORWARD로 검색됩니다.
     `?`{normal}을 입력 한 후 구문은 BACKWARD를 검색합니다.
     검색 유형 'n'(정상)을 사용하여 같은 방향으로 다음 항목을 찾습니다.
     또는 반대 방향으로 검색하려면`N` {normal}을 사용하십시오.
     `<Ctrl-o>`{normal}은 더 오래된 포지션으로,`<Ctrl-i>`{normal}는 새로운 포지션으로 되돌립니다.

  3. 커서가 (,), [,], {, 또는}에있는 동안`%`{normal}을 타이핑하면 그것의 match로 이동합니다.

  4. 행 유형에서 첫 번째 old로 new를 대체하려면
~~~ cmd
        :s/old/new
~~~
     모든 'old'를 라인 형식으로 대체하려면
~~~ cmd
        :s/old/new/g
~~~
     두 라인 # 유형 사이의 구를 대체하려면
~~~ cmd
        :#,#s/old/new/g
~~~
     파일 형식의 모든 항목을 대체하려면
~~~ cmd
        :%s/old/new/g
~~~
     'c'를 추가 할 때마다 확인을 요청하려면
~~~ cmd
        :%s/old/new/gc
~~~

# Lesson 5.1: 외부 명령을 실행하는 방법

** `:!`{vim}을 입력하고 그 명령을 실행하기위한 외부 명령을 입력하십시오. **

  1. 익숙한 명령`:`{normal}을 입력하여 커서를 화면 하단에 설정하십시오. 
     이렇게하면 command-line 명령을 입력 할 수 있습니다.

  2. 이제 [!] (! cmd) (느낌표) 문자를 입력하십시오. 
     이렇게하면 외부 쉘 명령을 실행할 수 있습니다.

  3. 예를 들어, "ls"다음에 "!" 그런 다음`<Enter>`{normal}을 누르십시오. 
     이렇게하면 쉘 프롬프트에서와 마찬가지로 디렉토리 목록이 표시됩니다.

참조:  argument도 외부 명령을 이 방법으로 실행할 수 있습니다.

참조:  전체 : 명령은 <Enter>를 눌러 완료해야합니다. 
      여기에서 우리는 항상 언급하지 않을 것입니다.

# Lesson 5.2: 쓰기 파일에 대한 추가 정보

** 텍스트 변경 사항을 저장하려면`: w` {vim} FILENAME을 입력하십시오. **

  1. `:! ls` {vim}을 입력하여 디렉토리 목록을 얻으십시오.
     당신은 다음에`<Enter>`{normal}을 눌러야한다는 것을 이미 알고 있습니다.

  2. TEST와 같이 아직 존재하지 않는 파일 이름을 선택하십시오.
  
  3. 이제 입력하십시오:
~~~ cmd
        :w TEST
~~~
    (where TEST is the filename you chose.)

  4. 이것은 전체 파일 (Vim Tutor)을 TEST라는 이름으로 저장합니다.
     이것을 확인하려면`:! ls` {vim}을 다시 입력하여 디렉토리를 확인하십시오.

참조: Vim을 종료하고 vim TEST로 다시 시작하면 파일을 저장했을 때
     파일이 tutor의 정확한 사본이됩니다.

  5. 명령어를 입력하여 파일을 제거하십시오.:
~~~ cmd
        :!rm TEST
~~~

# Lesson 5.3: SELECTING TEXT TO WRITE

** 파일의 일부를 저장하려면`v` {normal} 모션`: w FILENAME` {vim} **

  1. 커서를 해당 행으로 이동하십시오.

  2. [v](v)를 누르고 커서를 아래 다섯 번째 항목으로 이동하십시오. 
     텍스트가 강조 표시됩니다.

  3. 화면 하단의 `:`{normal} 문자를 누릅니다.

        :'<,'>

    가 나타날것입니다.

  4. 입력하십시오

        `:w TEST`{vim}

     여기서 TEST는 아직 존재하지 않는 파일 이름입니다.  보시고 확인하십시오.

        `:'<,'>w TEST`{vim}

     `<Enter>`{normal}을 누르기 전에.

  5. 빔은 선택한 줄을 TEST 파일에 씁니다. `:! ls` {vim}을 사용하십시오.
     아직 제거하지 마십시오! 우리는 다음 lesson에서 그것을 사용할 것입니다.

참조:  [v] (v)를 누르면 [시각적 선택]이 시작됩니다 (Visual Selection). 
      커서를 움직여 선택 항목을 더 크게 또는 더 작게 만들 수 있습니다. 그런 다음 연산자를 사용하여
      텍스트로 무언가를 할 수 있습니다. 예를 들어`d` {normal}은 텍스트를 삭제합니다.

# Lesson 5.4: 수색 및 합병 파일

** 파일의 내용을 삽입하려면`: r FILENAME` {vim}  **

  1. 이 선 바로 위에 커서를 놓습니다.

참조:  2 단계를 실행하면 5.3과 같은 텍스트가 표시됩니다. 
      그런 다음 아래로 이동하여 이 lesson을 다시보십시오.

  2. 이제 명령을 사용하여 TEST 파일을 검색하십시오.

        `:r TEST`{vim}

     TEST는 사용한 파일의 이름입니다.
     검색 한 파일은 커서 행 아래에 놓입니다.

  3. 파일이 검색되었는지 확인하려면 뒤로 커서를 이동하여 원본 및
     파일 버전 Lesson 5.3 사본이 두 개 있음을 확인하십시오.

참조:  외부 명령의 출력을 읽을 수도 있습니다. 예를 들어,

       `:r !ls`{vim}

       `ls` 명령의 출력을 읽고이를 커서 아래에 놓습니다.

# Lesson 5 요약

  1.  [:!command](:cmd)는 외부 명령을 실행합니다.

      유용한 예는 다음과 같습니다.:
      `:!ls`{vim}              -  디렉토리 목록을 보여줍니다.
      `:!rm FILENAME`{vim}     -  파일 FILENAME을 (를) 삭제합니다.

  2.  [:w](:w) FILENAME             현재 Vim 파일을 FILENAME 이름의 디스크에 씁니다.

  3.  [v](v)  motion  :w FILENAME   시각적으로 선택된 행을 파일 FILENAME에 저장합니다.

  4.  [:r](:r) FILENAME             디스크 파일 FILENAME을 검색하여 커서 위치 아래에 놓습니다.
  
  5.  [:r !dir](:r!)                dir 명령의 출력을 읽고 이를 커서 위치 아래에 놓습니다.

# Lesson 6.1: THE OPEN COMMAND

** `o` {normal}를 입력하여 커서 아래의 줄을 열고 삽입 모드로 전환하십시오. **

  1. 커서를 ---> 표시가있는 행으로 이동하십시오.

  2. 소문자 'o` {normal}를 입력하여 [open] (o) 한 줄 아래로 커서를 이동하여 삽입 모드로 전환하십시오.

  3. 이제 텍스트를 입력하고`<Esc>`{normal}을 눌러 삽입 모드를 종료하십시오.

---> o를 입력하면 삽입 모드에서 커서가 열린 줄에 놓입니다. {expect:ANYTHING}

  4. 커서 위의 줄을 여는 경우 소문자`o` {normal} 대신 [capital O] (O)를 입력하십시오. 
     아래 라인에서 이것을 시도하십시오.

---> 커서가 해당 줄에있을 때 O를 입력하여 위의 줄을 엽니다. {expect:ANYTHING}

# Lesson 6.2: APPEND 명령

** 커서 뒤에 텍스트를 삽입하려면`a`{normal}을 입력하십시오. **

  1. 커서를 ---> 표시가있는 행의 시작 부분으로 이동하십시오.

  2. 커서가 "li"의 끝 부분에 올 때까지 "e"{normal}를 누르십시오.

  3. 커서 뒤에 '추가'(a)하기 위해`a` {normal} (소문자)를 입력하십시오.

  4. 아래 줄과 같이 단어를 완성하십시오. 삽입 모드를 종료하려면`<Esc>`{normal}을 누르십시오.

  5. `e`{normal}를 사용하여 다음 불완전한 단어로 이동하고 3단계와 4단계를 반복하십시오.

---> This li will allow you to pract appendi text to a line. {expect:This line will allow you to practice appending text to a line.}
---> This line will allow you to practice appending text to a line. {expect:This line will allow you to practice appending text to a line.}

참조:  [a](a), [i](i) 및 [A](A)는 모두 동일한 삽입 모드로 이동하지만 유일한 차이는 문자가 삽입되는 곳입니다.

# Lesson 6.3: 대체 할 다른 방법

** 두 개 이상의 문자를 대치하려면 대문자`R` {normal}을 입력하십시오. **

  1. 커서를 ---> 표시가있는 첫 번째 줄로 이동하십시오. 커서를 첫 번째 "xxx"의 시작 부분으로 이동하십시오.

  2. 이제 'R` {normal} ([capital R] (R))을 누르고 두 번째 줄에 숫자를 입력하면 "xxx"가 대체됩니다.

  3. `<Esc>`{normal}을 눌러 [Replace mode](mode replace)를 빠져 나오십시오. 
     라인의 나머지 부분은 수정되지 않은 상태로 유지됩니다.

  4. 단계를 반복하여 나머지 "xxx"를 바꿉니다.

---> Adding 123 to xxx gives you xxx. {expect:Adding 123 to 456 gives you 579.}
---> Adding 123 to 456 gives you 579. {expect:Adding 123 to 456 gives you 579.}

참조:  Replace mode는 삽입 모드와 비슷하지만 모든 입력 된 문자는 기존 문자를 삭제합니다.

# Lesson 6.4: 복사 및 붙여 넣기 텍스트

** 텍스트를 복사하려면`y`{normal} 연산자를 사용하고 붙여 넣으려면`p`{normal} 연산자를 사용하십시오. **

  1. 아래의 ---로 표시된 행으로 이동하여 "a)"다음에 커서를 놓으십시오.

  2. 비주얼 모드를`v` {normal}로 시작하고 커서를 "first"바로 앞쪽으로 이동하십시오.

  3. 강조 표시된 텍스트에`y` {normal}를 입력하고 [yank](yank)(copy)합니다.

  4. 커서를 다음 줄의 끝으로 이동하십시오 :`j $`{normal}

  5. `p` {normal}을 입력하여 텍스트를 [put](put)(paste)합니다. 그런 다음 "a second",
     "<Esc>`{normal}를 입력하십시오.

  6. 비주얼 모드를 사용하여 "item."을 선택하고,`y` {normal}로 잡아 당기고,
     `j $`{normal}을 사용하여 다음 줄 끝으로 이동하여`p` {normal}로 텍스트를 넣으십시오.

---> a) 이것이 첫 번째 항목입니다.
---> b) {expect : b) 이것이 두 번째 항목}

  참조: 연산자로`y` {normal}을 사용할 수도 있습니다; `yw` {normal}는 한 단어를 yank.

# Lesson 6.5: SET OPTION

** 검색 또는 대체가 케이스를 무시하도록 옵션 설정 **

  1. `/ ignore`를 입력하여 '무시'를 검색하십시오.
     `n` {normal}을 눌러 여러 번 반복하십시오.

  2. 다음을 입력하여 'ic'(대소 문자 무시) 옵션을 설정하십시오.:
~~~ cmd
        :set ic
~~~
  3. 이제 n을 눌러 '무시'를 다시 검색하십시오.
     Ignore와 IGNORE도 이제 발견됩니다.

  4. 'hlsearch'및 'incsearch'옵션을 설정하십시오.
~~~ cmd
        :set hls is
~~~
  5. 이제 검색 명령을 다시 입력하고 어떤 일이 발생하는지 확인하십시오: /ignore <Enter>

  6. 대소 문자 무시 무시를 사용하려면:
~~~ cmd
        :set noic
~~~
  7. 설정의 값을 토글하려면 "inv":
~~~ cmd
        :set invic
~~~
참조:  일치 항목의 강조 표시를 제거하려면 다음을 입력하십시오:
~~~ cmd
        :nohlsearch
~~~
참조:  하나의 검색 명령에 대한 대소 문자를 무시하려면 구문에서
      [\c] (/\c)를 사용하십시오: /ignore\c  <Enter>

# Lesson 6 요약

  1. `o` {normal}를 입력하여 커서를 아래 줄에 놓고 커서를 삽입 모드로 시작하십시오.
     `O` {normal}을 입력하여 커서 위의 줄을여십시오.

  2. 커서 뒤에 텍스트를 삽입하려면`a` {normal}을 입력하십시오.
     행의 끝 뒤에 텍스트를 삽입하려면`A` {normal}를 입력하십시오.

  3. `e` {normal} 명령은 단어의 끝으로 이동합니다.

  4. `y` {normal} 연산자는 텍스트를 잡아(복사)하고 ,`p`{normal}는 그것을 붙여 넣는다.

  5. 대문자`R` {normal}를 입력하면`<Esc>`{normal}이 눌러 질 때까지 Replace 모드로 들어갑니다.

  6. "[: set] (: set) xxx"를 입력하면 "xxx"옵션이 설정됩니다. 일부 옵션은 다음과 같습니다:

        'ic' 'ignorecase'   검색 할 때 대 / 소문자를 무시하십시오.
        'is' 'incsearch'    검색 구문에 부분 일치 검색
        'hls' 'hlsearch'    모든 일치하는 문구를 강조 표시하십시오.

     긴 옵션 이름이나 짧은 옵션 이름을 사용할 수 있습니다.

  7. 옵션을 끄려면 "no"를 앞에 붙입니다.:
~~~ cmd
        :set noic
~~~
  8. "inv"앞에 옵션을 토글하십시오:
~~~ cmd
        :set invic
~~~

# Lesson 7.1: 도움말보기

** 온라인 도움말 시스템 사용 **

Vim은 포괄적 인 온라인 도움말 시스템을 갖추고 있습니다.  
시작하려면이 세 가지 중 하나를 시도해보십시오:
    - 입력 `<HELP>`{normal} key (if you have one)
    - 입력 `<F1>`{normal} key (if you have one)
    - 입력
        `:help`{vim}

도움말 창이 어떻게 작동하는지 알아 보려면 도움말 창에있는 텍스트를 읽으십시오.
한 window 창에서 다른 창으로 건너 뛰려면`<Ctrl-w> <Ctrl-w>`{normal}을 입력하십시오.
`:q` {vim}을 입력하면 도움말 창이 닫힙니다.

": help"명령에 대한 argument을 통해 모든 주제에 대한 도움말을 찾을 수 있습니다.  
다음을 실행해보세요.(don't forget pressing <Enter>):
~~~ cmd
    :help w
    :help c_CTRL-D
    :help insert-index
    :help user-manual
~~~
# Lesson 7.2: 시작 스크립트 만들기

** Vim 기능 사용 **

Vim은 Vi보다 많은 기능을 가지고 있지만 대부분은 기본적으로 비활성화되어 있습니다.
더 많은 기능을 사용하려면 "vimrc"파일을 만들어야합니다.

  1."vimrc"파일 편집을 시작하십시오. 이것은 시스템에 따라 다릅니다:
    `:e ~/.config/nvim/init.vim`{vim}     유닉스 계열 시스템 용

  2. 이제 예제 "vimrc"파일 내용을 읽으십시오.:
    `:r $VIMRUNTIME/vimrc_example.vim`{vim}

  3. 다음과 같이 파일작성:
    `:w`{vim}

  다음에 Vim을 시작할 때 구문 강조를 사용할 것이다.
  이 "vimrc"파일에 원하는 설정을 모두 추가 할 수 있습니다.
  자세한 정보는 다음을 입력하십시오 : help vimrc-intro

# Lesson 7.3: 완성

** `<Ctrl-d>`{normal}과`<Tab>`{normal}을 사용한 Command-line 완료 **

  1. 디렉터리에 어떤 파일이 있는지 살펴보십시오.`:! ls` {vim}

  2. 명령의 시작을 입력하십시오 :`: e` {vim}

  3. `<Ctrl-d>`{normal}을 누르면 Vim은 "e"로 시작하는 명령 목록을 보여줍니다.

  4. `<Tab>`{normal}을 누르면 Vim은 명령 이름을 ": edit"으로 완료합니다.

  5. 이제 공백과 기존 파일 이름의 시작 부분을 추가하십시오 :`: edit FIL` {vim}

  6. `<Tab>`{normal}을 누르십시오. Vim은 이름을 완성할 것 입니다(고유 한 경우).

참조:  완성은 많은 명령에 적용됩니다. 이것은`: help` {vim}에 특히 유용합니다.

# Lesson 7 요약

  1. `:help`{vim}을 입력하거나`<F1>`{normal} 또는`<Help>`{normal}를 눌러 도움말 창을여십시오.
  
  2. TOPIC에 대한 도움말을 찾으려면`: help TOPIC` {vim}을 입력하십시오.

  3. 다른 창으로 건너 뛰려면`<Ctrl-w> <Ctrl-w>`{normal}을 입력하십시오.

  4. 도움말 창을 닫으려면`: q` {vim}을 입력하십시오.

  5. vimrc 시작 스크립트를 만들어 원하는 설정을 유지하십시오.

  6. 명령 모드에서`<Ctrl-d>`{normal}을 누르면 완료를 볼 수 있습니다.
     `<Tab>`{normal}을 누르면 하나의 완료를 사용할 수 있습니다.

# 결론
이는 Vim 편집기에 대한 간략한 개요를 제공하기위한 것으로 편집기를 상당히 쉽게 사용할 수 있도록하기위한 것입니다. 
Vim은 더 많은 명령을 가지고 있기 때문에 해당 tutor은 완벽하지는 않습니다. 도움을 자주 참조하십시오.

vim에 관해 더 많은 것을 배우기 위해 온라인으로 많은 자료가 있습니다:

- *Learn Vim Progressively*: http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/
- *Learning Vim in 2014*: http://benmccormick.org/learning-vim-in-2014/
- Vimcasts: http://vimcasts.org/
- Vim Video-Tutorials by Derek Wyatt: http://derekwyatt.org/vim/tutorials/
- *Learn Vimscript the Hard Way*: http://learnvimscriptthehardway.stevelosh.com/
- *7 Habits of Effective Text Editing*: http://www.moolenaar.net/habits.html

책을 선호한다면 Drew Neil의 *Practival Vim*을 추천합니다.

이 튜토리얼은 Colorado State University의 Charles Smith가 제공 한 아이디어를 사용하여 
Colorado School of Mines의 Michael C. Pierce와 Robert K. Ware가 작성했습니다. 
이메일 : bware@mines.colorado.edu.

Bram Moolenaar 님이 Vim을 수정했습니다.
Felipe Morales의 vim-tutor-mode 용으로 수정되었습니다.
